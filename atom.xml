<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>新的开始</title>
  <icon>https://www.gravatar.com/avatar/42636a41ab0eebc521539304cbb8d80e</icon>
  <subtitle>XINGMU&#39;S BLOG</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://daihaoxin.github.io/"/>
  <updated>2019-03-17T15:35:09.431Z</updated>
  <id>https://daihaoxin.github.io/</id>
  
  <author>
    <name>xingmu</name>
    <email>daixingmu@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux deepin安装tensorflow、opencv、pytorh</title>
    <link href="https://daihaoxin.github.io/post/5b3541b1.html"/>
    <id>https://daihaoxin.github.io/post/5b3541b1.html</id>
    <published>2019-03-17T13:40:00.000Z</published>
    <updated>2019-03-17T15:35:09.431Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/omodao1/article/details/83241074" target="_blank" rel="noopener">Tensorflow不同版本要求与CUDA及CUDNN版本对应关系</a></p><p>安装深度学习的环境还是很复杂的，特别是 linux 下安装，新手更是闹不明白，笔者在安装的过程中因为执行错了命令，导致系统重做，各种血泪，本文是在重新安装的系统上实践出来的结果，仅供参考</p><h2 id="安装anaconda"><a href="#安装anaconda" class="headerlink" title="安装anaconda"></a>安装anaconda</h2><ul><li><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-5.3.1-Linux-x86.sh" target="_blank" rel="noopener">下载anaconda</a>, 这里下载的版本是<code>Anaconda3-5.3.1-Linux-x86_64</code>。</li><li><p>运行<code>sudo bash Anaconda3-5.3.1-Linux-x86_64</code>进行安装，一路默认可以。我修改了默认的安装路径<code>/root/anaconda3</code>到<code>/opt/anaconda3</code></p></li><li><p>最后一步，询问是否将 anaconda3 添加到 <code>.bashrc</code> , 选择 <code>no</code>。</p></li><li><p>配置环境变量，<code>sudo vi /etc/profile</code> 编辑 profile。</p></li><li><p>在文件最后加入 <code>export PATH=$PATH:/opt/anaconda3/bin</code> ， <strong>注意这里将 $PATH 放在了前面，主要是为了保证系统中默认的python版本不被覆盖，可以保证系统的正常运行不受影响</strong></p></li><li><p>保存 profile ， 运行 <code>source /etc/profile</code> 使配置生效。</p></li><li><p>运行<code>conda --version</code> ， 输出<code>conda 4.5.11</code>表示安装成功。</p></li></ul><h2 id="创建深度学习环境并激活"><a href="#创建深度学习环境并激活" class="headerlink" title="创建深度学习环境并激活"></a>创建深度学习环境并激活</h2><ul><li>创建一个环境并制定python版本为3.6，<code>conda create --name ai python=3.6</code></li><li>激活这个环境<code>source activate ai</code>，这时可以在终端命令行的开头看到多了<code>(ai)</code>，表示当前正在一个叫ai的虚拟环境里运行。</li></ul><h2 id="安装tensorflow"><a href="#安装tensorflow" class="headerlink" title="安装tensorflow"></a>安装tensorflow</h2><p>在 anaconda 创建的 ai 虚拟环境中安装 tensorflow-gpu 的 1.11.0。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install tensorflow-gpu=1.11.0</span></span><br><span class="line">Collecting tensorflow-gpu==1.12.0</span><br><span class="line">  Downloading https://files.pythonhosted.org/packages/55/7e/bec4d62e9dc95e828922c6cec38acd9461af8abe749f7c9def25ec4b2fdb/tensorflow_gpu-1.11.0-cp36-cp36m-manylinux1_x86_64.whl (281.7MB)...</span><br></pre></td></tr></table></figure></p><p>如果 tensorflow-gpu 的下载速度太慢，可以将下载链接复制到迅雷里下载，迅速会快很多。下载完成之后可以通过<code>pip install /path/下载文件</code> 来进行安装。</p><p>安装完成之后进行测试，新建一个<code>test.py</code>，并写入如下内容。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">hello = tf.constant(<span class="string">'Hello, TensorFlow!'</span>)</span><br><span class="line">sess = tf.Session()</span><br><span class="line">print(sess.run(hello))</span><br><span class="line">a = tf.constant(<span class="number">10</span>)</span><br><span class="line">b = tf.constant(<span class="number">32</span>)</span><br><span class="line">print(sess.run(a+b))</span><br></pre></td></tr></table></figure></p><p>然后<code>python test.py</code>运行，注意一下当前运行在 anaconda 的 ai 虚拟环境中。</p><p><img src="/images/深度学习环境安装-01.png" alt=""></p><h2 id="安装opencv"><a href="#安装opencv" class="headerlink" title="安装opencv"></a>安装opencv</h2><p>在 anaconda 创建的 ai 虚拟环境中，运行 <code>pip install opencv-python</code> 安装 opencv2。</p><p>安装完成之后进行测试，新建一个<code>testCV2.py</code>，并写入如下内容。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入cv模块</span></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="comment">#读取图像，支持 bmp、jpg、png、tiff 等常用格式</span></span><br><span class="line">img = cv.imread(<span class="string">"test.jpg"</span>)</span><br><span class="line"><span class="comment">#创建窗口并显示图像</span></span><br><span class="line">cv.namedWindow(<span class="string">"Image"</span>)</span><br><span class="line">cv.imshow(<span class="string">"Image"</span>,img)</span><br><span class="line">cv.waitKey(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#释放窗口</span></span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure></p><p>然后<code>python testCV2.py</code>运行，注意一下当前运行在 anaconda 的 ai 虚拟环境中。如果弹出窗口，窗口出现指定的路径的图片，就执行成功了。</p><h2 id="安装pytorch"><a href="#安装pytorch" class="headerlink" title="安装pytorch"></a>安装pytorch</h2><p>打开<a href="https://pytorch.org/" target="_blank" rel="noopener">pytorch官网</a>，在首页选择 pytorch 的运行环境，获取对应的执行命令。</p><p><img src="/images/深度学习环境安装-02.png" alt=""></p><p>在 anaconda 创建的 ai 虚拟环境中，运行上图中的命令安装 pytorch。</p><p>安装完成之后进行测试，新建一个<code>testPytorch.py</code>，并写入如下内容。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入cv模块</span></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="comment">#读取图像，支持 bmp、jpg、png、tiff 等常用格式</span></span><br><span class="line">img = cv.imread(<span class="string">"test.jpg"</span>)</span><br><span class="line"><span class="comment">#创建窗口并显示图像</span></span><br><span class="line">cv.namedWindow(<span class="string">"Image"</span>)</span><br><span class="line">cv.imshow(<span class="string">"Image"</span>,img)</span><br><span class="line">cv.waitKey(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#释放窗口</span></span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure></p><p>然后<code>python testPytorch.py</code>运行，注意一下当前运行在 anaconda 的 ai 虚拟环境中。如果输出如下内容，说明环境搭建成功。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tensor([1.], <span class="attribute">device</span>=<span class="string">'cuda:0'</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>环境搭建是学习的第一步，整个环境花了一天的时间才算完成，因为linux 还在学习中，python还是第一次接触，整个操作的过程中真的是剪不断理还乱，好在最后总算完成了。</p>]]></content>
    
    <summary type="html">
    
      迈出深度学习的第一步
    
    </summary>
    
    
      <category term="deepin" scheme="https://daihaoxin.github.io/tags/deepin/"/>
    
      <category term="环境安装" scheme="https://daihaoxin.github.io/tags/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>deepin linux安装nvidia驱动、cuda9、cudnn7</title>
    <link href="https://daihaoxin.github.io/post/5164653e.html"/>
    <id>https://daihaoxin.github.io/post/5164653e.html</id>
    <published>2019-03-17T12:40:00.000Z</published>
    <updated>2019-03-17T15:40:24.825Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/tiandsp/p/9441494.html" target="_blank" rel="noopener">cuda和gcc版本兼容的说明</a></p><p>安装深度学习的环境还是很复杂的，特别是 linux 下安装，新手更是闹不明白，笔者在安装的过程中因为执行错了命令，导致系统重做，各种血泪，本文是在重新安装的系统上实践出来的结果，仅供参考</p><h2 id="安装nvidia驱动"><a href="#安装nvidia驱动" class="headerlink" title="安装nvidia驱动"></a>安装nvidia驱动</h2><ol><li><p>安装驱动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nvidia-smi nvidia-driver</span><br></pre></td></tr></table></figure></li><li><p>调整显卡管理方案</p><p> 使用系统自带的 <code>显卡驱动管理器</code> 将显卡方案设置为 <code>NV-PRIME</code>。<br> <img src="/images/深度学习环境安装-03.png" alt=""></p></li><li><p>重新启动系统，应该能够看到旋转的茶壶画面</p></li><li><p>验证安装成功与否，打开终端输入命令<code>nvidia-smi</code>，如果出现类似下图，就说明安装成功了。</p></li></ol><p><img src="/images/深度学习环境安装-04.png" alt=""></p><h2 id="安装cuda"><a href="#安装cuda" class="headerlink" title="安装cuda"></a>安装cuda</h2><p>驱动安装完成后，就可以安装 cuda 了，不过在此之前还需要检查下<code>gcc</code>和<code>g++</code>的版本是否在 4.9~6.0之间，deepin自带的是7.+，需要降级。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install g++-6 gcc-6</span><br><span class="line">cd /usr/bin</span><br><span class="line">sudo rm gcc g++</span><br><span class="line">sudo ln -s g++-6 g++</span><br><span class="line">sudo ln -s gcc-6 gcc</span><br></pre></td></tr></table></figure></p><p>可以正式开始安装，cuda建议使用官方的安装的包，不要使用默认安装源内的版本，容易出现不兼容的问题。</p><ol><li><p><a href="https://developer.nvidia.com/cuda-90-download-archive" target="_blank" rel="noopener">下载 cuda 9.0</a>，这里选择了如下图。<br><img src="/images/深度学习环境安装-06.png" alt=""></p></li><li><p>使用<code>sudo sh cuda_9.0.176_384.81_linux.run</code>安装，安装过程中跳过 nvidia 驱动的安装，因为在上面我们已经安装过了，其他的依次正常安装即可。</p></li><li><p>将cuda添加到环境变量，在~/.bashrc文件中末尾加上</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cuda</span></span><br><span class="line"><span class="built_in">export</span> CUDA_HOME=/usr/<span class="built_in">local</span>/cuda-9.0</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$CUDA_HOME</span>/lib64:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$CUDA_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ~/.bashrc</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>查看版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ nvcc --version</span><br><span class="line">nvcc: NVIDIA (R) Cuda compiler driver</span><br><span class="line">Copyright (c) 2005-2017 NVIDIA Corporation</span><br><span class="line">Built on Fri_Sep__1_21:08:03_CDT_2017</span><br><span class="line">Cuda compilation tools, release 9.0, V9.0.176</span><br></pre></td></tr></table></figure></li><li><p>运行 cuda samples 测试</p><ul><li>进入要运行的测试程序，<code>cd ~/NVIDIA_CUDA-9.0_Samples/1_Utilities/deviceQuery</code></li><li><p>编译 <code>make</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"/usr/local/cuda-9.0"</span>/bin/nvcc -ccbin g++   -m64      -gencode <span class="attribute">arch</span>=compute_30,code=sm_30 -gencode <span class="attribute">arch</span>=compute_35,code=sm_35 -gencode <span class="attribute">arch</span>=compute_37,code=sm_37 -gencode <span class="attribute">arch</span>=compute_50,code=sm_50 -gencode <span class="attribute">arch</span>=compute_52,code=sm_52 -gencode <span class="attribute">arch</span>=compute_60,code=sm_60 -gencode <span class="attribute">arch</span>=compute_70,code=sm_70 -gencode <span class="attribute">arch</span>=compute_70,code=compute_70 -o deviceQuery deviceQuery.o </span><br><span class="line">mkdir -p <span class="built_in">..</span>/<span class="built_in">..</span>/bin/x86_64/linux/release</span><br><span class="line">cp deviceQuery <span class="built_in">..</span>/<span class="built_in">..</span>/bin/x86_64/linux/release</span><br></pre></td></tr></table></figure></li><li><p>运行编译结果<code>./deviceQuery</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">./deviceQuery Starting...</span><br><span class="line"></span><br><span class="line"> CUDA Device Query (Runtime API) version (CUDART static linking)</span><br><span class="line"></span><br><span class="line">Detected 1 CUDA Capable device(s)</span><br><span class="line"></span><br><span class="line">Device 0: "GeForce 940MX"</span><br><span class="line">  CUDA Driver Version / Runtime Version          9.1 / 9.0</span><br><span class="line">  CUDA Capability Major/Minor version number:    5.0</span><br><span class="line">  Total amount of global memory:                 2004 MBytes (2101870592 bytes)</span><br><span class="line">  ( 3) Multiprocessors, (128) CUDA Cores/MP:     384 CUDA Cores</span><br><span class="line">  GPU Max Clock rate:                            1189 MHz (1.19 GHz)</span><br><span class="line">  Memory Clock rate:                             2505 Mhz</span><br><span class="line">  Memory Bus Width:                              64-bit</span><br><span class="line">  L2 <span class="keyword">Cache</span> <span class="keyword">Size</span>:                                 <span class="number">1048576</span> <span class="keyword">bytes</span></span><br><span class="line">  Maximum Texture <span class="keyword">Dimension</span> <span class="keyword">Size</span> (x,y,z)         <span class="number">1</span>D=(<span class="number">65536</span>), <span class="number">2</span>D=(<span class="number">65536</span>, <span class="number">65536</span>), <span class="number">3</span>D=(<span class="number">4096</span>, <span class="number">4096</span>, <span class="number">4096</span>)</span><br><span class="line">  Maximum Layered <span class="number">1</span>D Texture <span class="keyword">Size</span>, (<span class="keyword">num</span>) layers  <span class="number">1</span>D=(<span class="number">16384</span>), <span class="number">2048</span> layers</span><br><span class="line">  Maximum Layered <span class="number">2</span>D Texture <span class="keyword">Size</span>, (<span class="keyword">num</span>) layers  <span class="number">2</span>D=(<span class="number">16384</span>, <span class="number">16384</span>), <span class="number">2048</span> layers</span><br><span class="line">  Total amount <span class="keyword">of</span> <span class="keyword">constant</span> <span class="keyword">memory</span>:               <span class="number">65536</span> <span class="keyword">bytes</span></span><br><span class="line">  Total amount <span class="keyword">of</span> <span class="keyword">shared</span> <span class="keyword">memory</span> per <span class="keyword">block</span>:       <span class="number">49152</span> <span class="keyword">bytes</span></span><br><span class="line">  Total <span class="built_in">number</span> <span class="keyword">of</span> registers available per <span class="keyword">block</span>: <span class="number">65536</span></span><br><span class="line">  Warp <span class="keyword">size</span>:                                     <span class="number">32</span></span><br><span class="line">  Maximum <span class="built_in">number</span> <span class="keyword">of</span> threads per multiprocessor:  <span class="number">2048</span></span><br><span class="line">  Maximum <span class="built_in">number</span> <span class="keyword">of</span> threads per <span class="keyword">block</span>:           <span class="number">1024</span></span><br><span class="line">  <span class="keyword">Max</span> <span class="keyword">dimension</span> <span class="keyword">size</span> <span class="keyword">of</span> a <span class="keyword">thread</span> <span class="keyword">block</span> (x,y,z): (<span class="number">1024</span>, <span class="number">1024</span>, <span class="number">64</span>)</span><br><span class="line">  <span class="keyword">Max</span> <span class="keyword">dimension</span> <span class="keyword">size</span> <span class="keyword">of</span> a grid <span class="keyword">size</span>    (x,y,z): (<span class="number">2147483647</span>, <span class="number">65535</span>, <span class="number">65535</span>)</span><br><span class="line">  Maximum <span class="keyword">memory</span> pitch:                          <span class="number">2147483647</span> <span class="keyword">bytes</span></span><br><span class="line">  Texture alignment:                             <span class="number">512</span> <span class="keyword">bytes</span></span><br><span class="line">  <span class="keyword">Concurrent</span> copy <span class="keyword">and</span> kernel execution:          Yes <span class="keyword">with</span> <span class="number">1</span> copy <span class="keyword">engine</span>(s)</span><br><span class="line">  Run <span class="built_in">time</span> <span class="keyword">limit</span> <span class="keyword">on</span> kernels:                     Yes</span><br><span class="line">  Integrated GPU sharing Host <span class="keyword">Memory</span>:            <span class="keyword">No</span></span><br><span class="line">  Support host page-<span class="keyword">locked</span> <span class="keyword">memory</span> <span class="keyword">mapping</span>:       Yes</span><br><span class="line">  Alignment requirement <span class="keyword">for</span> Surfaces:            Yes</span><br><span class="line">  Device has ECC support:                        Disabled</span><br><span class="line">  Device supports Unified Addressing (UVA):      Yes</span><br><span class="line">  Supports Cooperative Kernel Launch:            <span class="keyword">No</span></span><br><span class="line">  Supports MultiDevice Co-op Kernel Launch:      <span class="keyword">No</span></span><br><span class="line">  Device PCI <span class="keyword">Domain</span> <span class="keyword">ID</span> / Bus <span class="keyword">ID</span> / location <span class="keyword">ID</span>:   <span class="number">0</span> / <span class="number">1</span> / <span class="number">0</span></span><br><span class="line">  <span class="keyword">Compute</span> <span class="keyword">Mode</span>:</span><br><span class="line">     &lt; <span class="keyword">Default</span> (multiple host threads can <span class="keyword">use</span> ::cudaSetDevice() <span class="keyword">with</span> device simultaneously) &gt;</span><br><span class="line"></span><br><span class="line">deviceQuery, CUDA Driver = CUDART, CUDA Driver <span class="keyword">Version</span> = <span class="number">9.1</span>, CUDA Runtime <span class="keyword">Version</span> = <span class="number">9.0</span>, NumDevs = <span class="number">1</span></span><br><span class="line"><span class="keyword">Result</span> = PASS</span><br></pre></td></tr></table></figure></li></ul></li></ol><p>这样 cuda 的安装就大功告成了。</p><h2 id="cudnn-的安装"><a href="#cudnn-的安装" class="headerlink" title="cudnn 的安装"></a>cudnn 的安装</h2><p>打开<a href="">cudnn 下载地址</a> 下载 cuda-9.0 对应版本的 cudnn，需要注意的是 cudnn 需要注册登录才能下载。</p><p>这里下载的是 cuDNN 7.5 for CUDA 9.0 对应的linux版。<br><img src="/images/深度学习环境安装-05.png" alt=""></p><p>下载完成后 <code>tar -zxvf cudnn-9.1-linux-x64-v7.1.tgz</code> ， 将解压出来的cuda文件夹复制到<code>/usr/local</code>。</p><p><strong>关键的步骤来了</strong><br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">cd</span> /etc/ld.<span class="keyword">so</span>.<span class="keyword">conf</span>.<span class="built_in">d</span></span><br><span class="line">$ touch cuda.<span class="keyword">conf</span></span><br><span class="line">$ vi cuda.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure></p><p>在conda.conf中输入如下内容<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/cuda/</span>lib64</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/cuda-9.0/</span>lib64</span><br></pre></td></tr></table></figure></p><p>之所以说是关键步骤，因为经过无数次的测试验证，这样的配置可以解决 <code>tensorflow</code> 运行时出现的<br><code>ImportError:libcublas.so.9.0: cannot open shared object file: No such file or directory</code> 和 <code>ImportError:libcudnn.so.7: cannot open shared object file: No such file or directory</code></p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>不断学习思考是不断进步的保证</p>]]></content>
    
    <summary type="html">
    
      迈出深度学习的第一步
    
    </summary>
    
    
      <category term="deepin" scheme="https://daihaoxin.github.io/tags/deepin/"/>
    
      <category term="环境安装" scheme="https://daihaoxin.github.io/tags/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>linux下多个git账号的配置</title>
    <link href="https://daihaoxin.github.io/post/5f8b2e94.html"/>
    <id>https://daihaoxin.github.io/post/5f8b2e94.html</id>
    <published>2019-03-17T07:25:00.000Z</published>
    <updated>2019-03-17T07:55:15.069Z</updated>
    
    <content type="html"><![CDATA[<p>周末在 deepin linux 上安装深度学习环境的时候，把系统搞挂了，找了一下备份的系统，最近的还在去年 4 月份，思前想后，最后选择了重装系统，顺便记录下笔记。下面的操作实在全新安装的系统上进行了。</p><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git地址</a>在这里，今天用的是 deepin 所以直接使用源安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt-get install git</span></span><br></pre></td></tr></table></figure><p>全局配置 name 和 email<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">"xxx"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.email <span class="string">"eamil@qq.com"</span></span></span><br></pre></td></tr></table></figure></p><h2 id="生成公钥"><a href="#生成公钥" class="headerlink" title="生成公钥"></a>生成公钥</h2><p>创建<code>~/xingmu/.ssh</code>目录，并进入。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir .ssh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> .ssh</span></span><br></pre></td></tr></table></figure></p><p>在<code>~/xingmu/.ssh</code>目录下，用 ssh-keygen 命令生成一组新的 id_rsa_new 和 id_rsa_new.pub，我这里需要使用 github 和 gitee(码云)两个平台，所以需要执行两次命令，分别生成 id_rsa_github/id_rs_github.pub 和 id_rsa_gitee/id_rsa_gitee.pub两组。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -C <span class="string">"xxx@xxx.com"</span></span></span><br></pre></td></tr></table></figure><p>需要注意的是，平时都是默认生成 id_rsa 和 id_rsa.pub 。现在要在第一个提示输入出现时分别输入带有表示意义的名字，以便于识别，这里我输入的是 id_rsa_github 和 id_rsa_gitee。</p><h2 id="配置config"><a href="#配置config" class="headerlink" title="配置config"></a>配置config</h2><p>将公钥分别配置到对应的 git 平台上，然后在<code>~/xingmu/.ssh</code>目录下新建 config 文件，配置参考如下。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## github</span></span><br><span class="line"><span class="comment"># 域名地址的别名</span></span><br><span class="line"><span class="string">Host</span> <span class="string">github</span></span><br><span class="line"><span class="comment"># 这个是真实的域名地址            </span></span><br><span class="line"><span class="string">Hostname</span> <span class="string">github.com</span></span><br><span class="line"><span class="comment"># 配置使用用户名    </span></span><br><span class="line"><span class="string">User</span> <span class="string">xxx@xx.com</span></span><br><span class="line"><span class="comment"># 这里是id_rsa的目录位置                </span></span><br><span class="line"><span class="string">IdentityFile</span> <span class="string">~/.ssh/id_rsa_github</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">## 码云</span></span><br><span class="line"><span class="comment"># 域名地址的别名</span></span><br><span class="line"><span class="string">Host</span> <span class="string">gitee</span></span><br><span class="line"><span class="comment"># 这个是真实的域名地址            </span></span><br><span class="line"><span class="string">Hostname</span> <span class="string">gitee.com</span></span><br><span class="line"><span class="comment"># 配置使用用户名    </span></span><br><span class="line"><span class="string">User</span> <span class="string">xxx@xx.com</span></span><br><span class="line"><span class="comment"># 这里是id_rsa的目录位置                </span></span><br><span class="line"><span class="string">IdentityFile</span> <span class="string">~/.ssh/id_rsa_gitee</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 以下第三个或者更多</span></span><br></pre></td></tr></table></figure></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh -T git@github</span></span><br><span class="line">Hi your name! You've successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh -T git@gitee</span></span><br><span class="line">Hi xingmu! You've successfully authenticated, but GITEE.COM does not provide shell access.</span><br></pre></td></tr></table></figure><p>如果出现如下的提示，选择 yes 继续就可以了<br><img src="/images/多账号git.png" alt=""></p><p>然后就可以愉快的玩耍了！！</p>]]></content>
    
    <summary type="html">
    
      有时候我们需要在同一台机器上使用多个git账号，为了避免冲突，我们需要配置~/.ssh/config文件...
    
    </summary>
    
      <category term="构建工具" scheme="https://daihaoxin.github.io/categories/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="deepin" scheme="https://daihaoxin.github.io/tags/deepin/"/>
    
      <category term="git" scheme="https://daihaoxin.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>deepin中安装jdk</title>
    <link href="https://daihaoxin.github.io/post/36da9d0d.html"/>
    <id>https://daihaoxin.github.io/post/36da9d0d.html</id>
    <published>2019-03-10T12:40:00.000Z</published>
    <updated>2019-03-17T15:34:00.536Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">下载jdk</a></p><ol><li><p>解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ mv /opt</span><br><span class="line">$ mkdir java</span><br><span class="line">$ cd java</span><br><span class="line">$ mv ~/Downloads/jdk-8u144-linux-x64.tar.gz .</span><br><span class="line">$ tar -zxvf jdk-8u144-linux-x64.tar.gz</span><br><span class="line">$ mv jdk-8u144 jdk1.8</span><br></pre></td></tr></table></figure></li><li><p>设置环境变量</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /etc/profile</span><br></pre></td></tr></table></figure><p>在最后加入如下内容<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#set java environment</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/opt/java/jdk1.8</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JRE_HOME</span>=/opt/java/jdk1.8/jre</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">CLASS_PATH</span>=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$JAVA_HOME</span>/bin:$JRE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure></p><p>让修改生效<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> /etc/profile</span></span><br></pre></td></tr></table></figure></p><ol start="3"><li>验证<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$  java -version</span><br><span class="line">java version &quot;1.8.0_144&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_144-b01)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      手动解压JDK的压缩包，然后设置环境变量
    
    </summary>
    
    
      <category term="deepin" scheme="https://daihaoxin.github.io/tags/deepin/"/>
    
      <category term="java" scheme="https://daihaoxin.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>linux在终端通过命令打开文件夹</title>
    <link href="https://daihaoxin.github.io/post/c1433548.html"/>
    <id>https://daihaoxin.github.io/post/c1433548.html</id>
    <published>2019-03-08T04:00:34.000Z</published>
    <updated>2019-03-17T11:36:49.479Z</updated>
    
    <content type="html"><![CDATA[<ol><li>在 deepin linux 中提供了一个叫 <code>dde-file-manager</code> 的命令可以在命令行打开制定路径的文件夹。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开当前位置的文件夹</span></span><br><span class="line">dde-file-manager .</span><br><span class="line"><span class="comment"># 打开指定位置的文件夹</span></span><br><span class="line">dde-file-manager /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用nautilus</li></ol><p>linux 图形化桌面 GNOME 包括了一个叫做 Nautilus 的文件管理器，可以通过安装 nautilus 来使用 nautilus 命令，在命令窗口中直接打开指定的文件夹。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装nautilus</span></span><br><span class="line">sudo apt-get install nautilus</span><br><span class="line"><span class="comment"># 打开当前位置的文件夹</span></span><br><span class="line">nautilus .</span><br><span class="line"><span class="comment"># 打开指定位置的文件夹</span></span><br><span class="line">nautilus /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      文件管理器中右键有 在终端中打开 当前目录，在终端中怎么打开文件管理器的图形界面？
    
    </summary>
    
      <category term="linux" scheme="https://daihaoxin.github.io/categories/linux/"/>
    
    
      <category term="deepin" scheme="https://daihaoxin.github.io/tags/deepin/"/>
    
  </entry>
  
  <entry>
    <title>idea消息框等界面中文显示成小方块</title>
    <link href="https://daihaoxin.github.io/post/3050fa27.html"/>
    <id>https://daihaoxin.github.io/post/3050fa27.html</id>
    <published>2019-03-06T10:00:00.000Z</published>
    <updated>2019-03-17T11:23:46.527Z</updated>
    
    <content type="html"><![CDATA[<p>操作系统环境是deepin linux，版本是 2018.3 ，搜索窗口、帮助窗口、消息窗口等出现乱码，idea、webstorm、pycharm 都出现这样的情况，如下图所示。<br><img src="/images/idea-中文乱码-01.png" alt=""></p><p>这个乱码跟编码格式无关，根本原因是 IDE 的界面主题使用的字体，显示中文有 bug ，所以只有设置下中文字体就可以解决了，我这里设置的 微软雅黑。<br><img src="/images/idea-中文乱码-02.png" alt=""></p><p>另外说一下就是，在 deepin linux 中如果无法找到中文字体，可以去网上下载，通过系统自带的字体安装器安装到系统，然后重启 IDE 就可以选择了。<br><img src="/images/idea-中文乱码-03.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      解决 idea 系列编辑器在消息框中，中文显示小方块的问题
    
    </summary>
    
      <category term="编辑器" scheme="https://daihaoxin.github.io/categories/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
    
      <category term="deepin" scheme="https://daihaoxin.github.io/tags/deepin/"/>
    
      <category term="idea" scheme="https://daihaoxin.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>[转]阮一峰-IntersectionObserver API 使用教程</title>
    <link href="https://daihaoxin.github.io/post/3d5f3b65.html"/>
    <id>https://daihaoxin.github.io/post/3d5f3b65.html</id>
    <published>2019-02-28T16:00:00.000Z</published>
    <updated>2019-03-17T06:19:04.447Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.ruanyifeng.com/blog/2016/11/intersectionobserver_api.html" target="_blank" rel="noopener">原文地址</a><br>一直以来，检测元素的可视状态或者两个元素的相对可视状态都不是件容易事，毕竟大部分解决办法并非完全可靠，也极易拖慢整个网站的性能。然而，随着网页发展，对上述检测的需求也随之增加了。多种情况下都需要用到元素交集变化的信息，比如：</p><ul><li>当页面滚动时，懒加载图片或其他内容。</li><li>实现“可无限滚动”网站，也就是当用户滚动网页时直接加载更多内容，无需翻页。</li><li>为计算广告收益，检测其广告元素的曝光情况。</li><li>根据用户是否已滚动到相应区域来灵活开始执行任务或动画。</li></ul><p><img src="/images/intersectionObserver-01.png" alt=""></p><p>上图的绿色方块不断滚动，顶部会提示它的可见性。</p><p>传统的实现方法是，监听到scroll事件后，调用目标元素（绿色方块）的<code>getBoundingClientRect()</code>方法，得到它对应于视口左上角的坐标，再判断是否在视口之内。这种方法的缺点是，<strong>由于scroll事件密集发生，不断调用getBoundingClientRect()来计算元素相对位置，会造成频繁的回流和重绘，而且Element.getBoundingClientRect()运行在主线程上，容易造成性能问题</strong>。</p><p>目前有一个新的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Intersection_Observer_API" target="_blank" rel="noopener">IntersectionObserver API</a>，可以自动”观察”元素是否可见，<code>Chrome 51+</code> 已经支持。由于可见（visible）的本质是，目标元素与视口产生一个交叉区，所以这个 API 叫做”交叉观察器”。</p><p>Intersection Observer API 会注册一个回调方法，每当期望被监视的元素进入或者退出另外一个元素的时候(或者浏览器的视口)该回调方法将会被执行，或者两个元素的交集部分大小发生变化的时候回调方法也会被执行。通过这种方式，网站将不需要为了监听两个元素的交集变化而在主线程里面做任何操作，并且浏览器可以帮助我们优化和管理两个元素的交集变化。</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> io = <span class="keyword">new</span> IntersectionObserver(callback, option);</span><br></pre></td></tr></table></figure><p>上面代码中，IntersectionObserver 是浏览器原生提供的构造函数，接受两个参数，callback 是可见性变化时的回调函数，option 是配置对象（该参数可选）。</p><p>构造函数的返回值是一个观察器实例。实例的 observe 方法可以指定观察哪个 DOM 节点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开始观察</span></span><br><span class="line">io.observe(<span class="built_in">document</span>.getElementById(<span class="string">'example'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止观察</span></span><br><span class="line">io.unobserve(element);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭观察器</span></span><br><span class="line">io.disconnect();</span><br></pre></td></tr></table></figure><p>上面代码中，observe 的参数是一个 DOM 节点对象。如果要观察多个节点，就要多次调用这个方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">io.observe(elementA);</span><br><span class="line">io.observe(elementB);</span><br></pre></td></tr></table></figure><h2 id="callback-参数"><a href="#callback-参数" class="headerlink" title="callback 参数"></a>callback 参数</h2><p>目标元素的可见性变化时，就会调用观察器的回调函数 callback。</p><p>callback 一般会触发两次。一次是目标元素刚刚进入视口（开始可见），另一次是完全离开视口（开始不可见）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> io = <span class="keyword">new</span> IntersectionObserver(</span><br><span class="line">  entries =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(entries);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>上面代码中，回调函数采用的是箭头函数的写法。callback函数的参数（entries）是一个数组，每个成员都是一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserverEntry" target="_blank" rel="noopener">IntersectionObserverEntry</a>对象。举例来说，如果同时有两个被观察的对象的可见性发生变化，entries 数组就会有两个成员。</p><h2 id="IntersectionObserverEntry-对象"><a href="#IntersectionObserverEntry-对象" class="headerlink" title="IntersectionObserverEntry 对象"></a>IntersectionObserverEntry 对象</h2><p><code>IntersectionObserverEntry</code>对象提供目标元素的信息，一共有六个属性。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    time: 3893.92,</span><br><span class="line">    rootBounds: ClientRect &#123;</span><br><span class="line">        bottom: 920,</span><br><span class="line">        height: 1024,</span><br><span class="line">        left: 0,</span><br><span class="line">        right: 1024,</span><br><span class="line">        top: 0,</span><br><span class="line">        width: 920</span><br><span class="line">    &#125;,</span><br><span class="line">    boundingClientRect: ClientRect &#123;</span><br><span class="line">        // ...</span><br><span class="line">    &#125;,</span><br><span class="line">    intersectionRect: ClientRect &#123;</span><br><span class="line">        // ...</span><br><span class="line">    &#125;,</span><br><span class="line">    intersectionRatio: 0.54,</span><br><span class="line">    target: element</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>每个属性的含义如下。</p><ul><li>time：可见性发生变化的时间，是一个高精度时间戳，单位为毫秒</li><li>target：被观察的目标元素，是一个 DOM 节点对象</li><li>rootBounds：根元素的矩形区域的信息，getBoundingClientRect()方法的返回值，如果没有根元素（即直接相对于视口滚动），则返回null</li><li>boundingClientRect：目标元素的矩形区域的信息</li><li>intersectionRect：目标元素与视口（或根元素）的交叉区域的信息</li><li>intersectionRatio：目标元素的可见比例，即intersectionRect占boundingClientRect的比例，完全可见时为1，完全不可见时小于等于0<br><img src="/images/IntersectionObserver-02.png" alt=""></li></ul><p>上图中，灰色的水平方框代表视口，深红色的区域代表四个被观察的目标元素。它们各自的<code>intersectionRatio</code>图中都已经注明。</p><p>我写了一个 <a href="https://jsbin.com/canuze/edit?js,console,output" target="_blank" rel="noopener">Demo</a>，演示<code>IntersectionObserverEntry</code>对象。注意，这个 Demo 只能在 Chrome 51+ 运行。</p><h2 id="实例：惰性加载（lazy-load）"><a href="#实例：惰性加载（lazy-load）" class="headerlink" title="实例：惰性加载（lazy load）"></a>实例：惰性加载（lazy load）</h2><p>有时，我们希望某些静态资源（比如图片），只有用户向下滚动，它们进入视口时才加载，这样可以节省带宽，提高网页性能。这就叫做”惰性加载”。</p><p>有了 IntersectionObserver API，实现起来就很容易了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(selector));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> observer = <span class="keyword">new</span> IntersectionObserver(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">changes</span>) </span>&#123;</span><br><span class="line">    changes.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">change</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> container = change.target;</span><br><span class="line">      <span class="keyword">var</span> content = container.querySelector(<span class="string">'template'</span>).content;</span><br><span class="line">      container.appendChild(content);</span><br><span class="line">      observer.unobserve(container);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">query(<span class="string">'.lazy-loaded'</span>).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">  observer.observe(item);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>上面代码中，只有目标区域可见时，才会将模板内容插入真实 DOM，从而引发静态资源的加载。</p><h2 id="实例：无限滚动"><a href="#实例：无限滚动" class="headerlink" title="实例：无限滚动"></a>实例：无限滚动</h2><p>无限滚动（infinite scroll）的实现也很简单。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> intersectionObserver = <span class="keyword">new</span> IntersectionObserver(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">entries</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果不可见，就返回</span></span><br><span class="line">    <span class="keyword">if</span> (entries[<span class="number">0</span>].intersectionRatio &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    loadItems(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Loaded new items'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始观察</span></span><br><span class="line">intersectionObserver.observe(</span><br><span class="line">  <span class="built_in">document</span>.querySelector(<span class="string">'.scrollerFooter'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>无限滚动时，最好在页面底部有一个页尾栏（又称sentinels）。一旦页尾栏可见，就表示用户到达了页面底部，从而加载新的条目放在页尾栏前面。这样做的好处是，不需要再一次调用observe()方法，现有的IntersectionObserver可以保持使用。</p><h2 id="Option-对象"><a href="#Option-对象" class="headerlink" title="Option 对象"></a>Option 对象</h2><p><code>IntersectionObserver</code> 构造函数的第二个参数是一个配置对象。它可以设置以下属性。</p><h3 id="threshold-属性"><a href="#threshold-属性" class="headerlink" title="threshold 属性"></a>threshold 属性</h3><p>threshold属性决定了什么时候触发回调函数。它是一个数组，每个成员都是一个门槛值，默认为[0]，即交叉比例（intersectionRatio）达到0时触发回调函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> IntersectionObserver(</span><br><span class="line">    entries =&gt; &#123;</span><br><span class="line">        <span class="comment">/* ... */</span> </span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        threshold: [<span class="number">0</span>, <span class="number">0.25</span>, <span class="number">0.5</span>, <span class="number">0.75</span>, <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>用户可以自定义这个数组。比如，<code>[0, 0.25, 0.5, 0.75, 1]</code>就表示当目标元素 0%、25%、50%、75%、100% 可见时，会触发回调函数。<br><img src="/images/IntersectionObserver-03.png" alt=""></p><h3 id="root-属性，rootMargin-属性"><a href="#root-属性，rootMargin-属性" class="headerlink" title="root 属性，rootMargin 属性"></a>root 属性，rootMargin 属性</h3><p>很多时候，目标元素不仅会随着窗口滚动，还会在容器里面滚动（比如在<code>iframe</code>窗口里滚动）。容器内滚动也会影响目标元素的可见性，参见本文开始时的那张示意图。</p><p>IntersectionObserver API 支持容器内滚动。<code>root</code>属性指定目标元素所在的容器节点（即根元素）。注意，容器元素必须是目标元素的祖先节点。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> opts = &#123;</span><br><span class="line">    root: <span class="built_in">document</span>.querySelector(<span class="string">'.container'</span>),</span><br><span class="line">    rootMargin: <span class="string">"500px 0px"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> observer = <span class="keyword">new</span> IntersectionObserver(</span><br><span class="line">    callback,</span><br><span class="line">    opts</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>上面代码中，除了 root 属性，还有<code>rootMargin</code>属性。后者定义根元素的 margin，用来扩展或缩小 rootBounds 这个矩形的大小，从而影响 intersectionRect 交叉区域的大小。它使用CSS的定义方法，比如<code>10px 20px 30px 40px</code>，表示 top、right、bottom 和 left 四个方向的值。</p><p>这样设置以后，不管是窗口滚动或者容器内滚动，只要目标元素可见性变化，都会触发观察器。</p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>IntersectionObserver API 是异步的，不随着目标元素的滚动同步触发。</p><p>规格写明，<code>IntersectionObserver</code>的实现，应该采用<code>requestIdleCallback()</code>，即只有线程空闲下来，才会执行观察器。这意味着，这个观察器的优先级非常低，只在其他任务执行完，浏览器有了空闲才会执行。</p><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><ul><li>Chrome 51+（发布于 2016-05-25）</li><li>Android 5+ （Chrome 56 发布于 2017-02-06）</li><li>Edge 15 （2017-04-11）</li><li>iOS 不支持</li></ul><p>WICG 提供了一个 <a href="https://github.com/w3c/IntersectionObserver" target="_blank" rel="noopener">Polyfill</a>。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://lz5z.com/%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/" target="_blank" rel="noopener">图片懒加载的几种实现方式</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Intersection_Observer_API#Browser_compatibility" target="_blank" rel="noopener">MDN</a></p>]]></content>
    
    <summary type="html">
    
      IntersectionObserver API，可以自动&quot;观察&quot;元素是否可见，Chrome 51+ 已经支持。由于可见（visible）的本质是，目标元素与视口产生一个交叉区，所以这个 API 叫做&quot;交叉观察器&quot;。
    
    </summary>
    
      <category term="javascript" scheme="https://daihaoxin.github.io/categories/javascript/"/>
    
    
      <category term="dom" scheme="https://daihaoxin.github.io/tags/dom/"/>
    
      <category term="转载" scheme="https://daihaoxin.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>动手实现react-redux之五Provider终篇</title>
    <link href="https://daihaoxin.github.io/post/83f2f127.html"/>
    <id>https://daihaoxin.github.io/post/83f2f127.html</id>
    <published>2019-02-18T12:59:00.000Z</published>
    <updated>2019-03-17T06:19:04.447Z</updated>
    
    <content type="html"><![CDATA[<p>现在代码中依赖 context 只有 Index 组件了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> childContextTypes = &#123;</span><br><span class="line">        store: PropTypes.object</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    getChildContext() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; store &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;Header /&gt;</span><br><span class="line">                &lt;Content /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><p>这里使用 context 的主要是为了将 store 放入 context 里面，方便子组件 connect 的时候可以拿得到 store。我们可以将这块的内容抽出来单独做个组件，并将需要使用 store 的组件作为这个组件的子组件。</p><p>这个组件命名为 Provider （提供者）。新增一个 src/Provider.js，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">"prop-types"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Provider</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> childContextTypes = &#123;</span><br><span class="line">        store: PropTypes.object.isRequired</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">        store: PropTypes.object</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    getChildContext() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            store: <span class="keyword">this</span>.props.store</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    render() &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;React.Fragment&gt;</span><br><span class="line">                &#123;<span class="keyword">this</span>.props.children&#125;</span><br><span class="line">            &lt;<span class="regexp">/React.Fragment&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Provider;</span></span><br></pre></td></tr></table></figure></p><p>Provider 做的事情也很简单，它就是一个容器组件，会把嵌套的内容原封不动作为自己的子组件渲染出来。它还会把外界传给它的 props.store 放到 context，这样子组件 connect 的时候都可以获取到。</p><p>然后重构 src/index.js:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">"./Header"</span>;</span><br><span class="line"><span class="keyword">import</span> Content <span class="keyword">from</span> <span class="string">"./Content"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"./index.css"</span>;</span><br><span class="line"><span class="keyword">import</span> Provider <span class="keyword">from</span> <span class="string">"./Provider"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStore</span>(<span class="params">reducer</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> events = [];</span><br><span class="line">    <span class="keyword">let</span> state = <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> store = &#123;</span><br><span class="line">        subscribe: <span class="function">(<span class="params">event</span>) =&gt;</span> events.push(event),</span><br><span class="line">        dispatch: <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">            state = reducer(state, action);</span><br><span class="line">            events.forEach(<span class="function">(<span class="params">event</span>) =&gt;</span> event());</span><br><span class="line">        &#125;,</span><br><span class="line">        getState: <span class="function"><span class="params">()</span> =&gt;</span> state</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 初始化state</span></span><br><span class="line">    store.dispatch(&#123;&#125;);</span><br><span class="line">    <span class="keyword">return</span> store;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">themeReducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!state) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            themeColor: <span class="string">"red"</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"CHANGE_THEME_COLOR"</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123; ...state, <span class="attr">themeColor</span>: action.themeColor &#125;;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(themeReducer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">        &lt;Header /&gt;</span><br><span class="line">        &lt;Content /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">    document.getElementById("root")</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure></p><p>这样我们就把所有关于 context 的代码从组件里面删除了。</p><p>现在通过这种方式大家不仅仅知道了 React-redux 的基础概念和用法，而且还知道这些概念到底是解决什么问题，为什么 React-redux 这么奇怪，为什么要 connect，为什么要 mapStateToProps 和 mapDispatchToProps，什么是 Provider，我们通过解决一个个问题就知道它们到底为什么要这么设计的了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://huziketang.mangojuice.top/books/react/" target="_blank" rel="noopener">http://huziketang.mangojuice.top/books/react/</a></p>]]></content>
    
    <summary type="html">
    
      通过解决实际遇到问题来了解 react-redux 的用法和设计原理。
    
    </summary>
    
      <category term="javascript" scheme="https://daihaoxin.github.io/categories/javascript/"/>
    
    
      <category term="动手模拟" scheme="https://daihaoxin.github.io/tags/%E5%8A%A8%E6%89%8B%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="react" scheme="https://daihaoxin.github.io/tags/react/"/>
    
      <category term="redux" scheme="https://daihaoxin.github.io/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>动手实现react-redux之四mapDispatchToProps</title>
    <link href="https://daihaoxin.github.io/post/a24de6ae.html"/>
    <id>https://daihaoxin.github.io/post/a24de6ae.html</id>
    <published>2019-02-18T12:57:00.000Z</published>
    <updated>2019-03-17T06:19:04.447Z</updated>
    
    <content type="html"><![CDATA[<p>重构 ThemeSwitch 组件除了需要 store 里面的数据，还需要通过 store 的 dispatch 来修改数据。现在 connect 还提供不了这个功能，需要进一步改进 connect。</p><p>仿照给 connect 传入 mapStateToProps 函数来达到获取指定数据的效果，给 connect 再提供一个 mapDispatchToProps 函数来告诉 connect 组件需要如何调用 dispatch。这个函数应该是这样的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        onSwitchColor: <span class="function">(<span class="params">color</span>) =&gt;</span> &#123;</span><br><span class="line">            dispatch(&#123; <span class="attr">type</span>: <span class="string">"CHANGE_THEME_COLOR"</span>, <span class="attr">themeColor</span>: color &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>mapDispatchToProps 也是返回一个对象，和 mapStateToProps 不同的地方是传入的参数不是 state ，而是 dispatch。下面来修改 connect ，让他可以处理 mapDispatchToProps。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">"prop-types"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params">mapStateToProps, mapDispatchToProps</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">WrappedComponent</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Connect</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">            <span class="keyword">static</span> contextTypes = &#123;</span><br><span class="line">                store: PropTypes.object</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line">            state = &#123;</span><br><span class="line">                allProps: &#123;&#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line">            componentWillMount() &#123;</span><br><span class="line">                <span class="keyword">const</span> &#123; store &#125; = <span class="keyword">this</span>.context;</span><br><span class="line">                <span class="comment">// 挂载的时候，进行第一次渲染</span></span><br><span class="line">                <span class="keyword">this</span>.updateProps();</span><br><span class="line">                <span class="comment">// 然后订阅 store 的后续变化，并更新</span></span><br><span class="line">                store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.updateProps());</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            updateProps() &#123;</span><br><span class="line">                <span class="keyword">const</span> &#123; store &#125; = <span class="keyword">this</span>.context;</span><br><span class="line">                <span class="keyword">const</span> state = store.getState();</span><br><span class="line">                <span class="comment">// 额外传入 props，让获取数据更加灵活方便</span></span><br><span class="line">                <span class="keyword">let</span> stateProps = mapStateToProps ? mapStateToProps(state, <span class="keyword">this</span>.props) : &#123;&#125;;</span><br><span class="line">                <span class="keyword">let</span> dispatchProps = mapDispatchToProps ? mapDispatchToProps(store.dispatch, <span class="keyword">this</span>.props) : &#123;&#125;;</span><br><span class="line">                <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                    <span class="comment">// 整合普通的 props 和从 state 生成的 props</span></span><br><span class="line">                    allProps: &#123;</span><br><span class="line">                        ...this.props,</span><br><span class="line">                        ...stateProps,</span><br><span class="line">                        ...dispatchProps</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            render() &#123;</span><br><span class="line">                <span class="comment">// let &#123;  &#125; = this.props;</span></span><br><span class="line">                <span class="keyword">return</span> (</span><br><span class="line">                    &lt;WrappedComponent &#123;...this.state.allProps&#125; /&gt;</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Connect;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect;</span><br></pre></td></tr></table></figure><p>这时候我们就可以重构 ThemeSwitch，让它摆脱 store.dispatch 和 context。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">"prop-types"</span>;</span><br><span class="line"><span class="keyword">import</span> connect <span class="keyword">from</span> <span class="string">"./connect"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThemeSwitch</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">        color: PropTypes.string,</span><br><span class="line">        switchColor: PropTypes.func.isRequired</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 更新store中的颜色</span></span><br><span class="line">    handleSwitchColor(color) &#123;</span><br><span class="line">        <span class="keyword">this</span>.props.switchColor(color);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button</span><br><span class="line">                    style=&#123;&#123; <span class="attr">color</span>: <span class="keyword">this</span>.props.themeColor &#125;&#125;</span><br><span class="line">                    onClick=&#123;<span class="keyword">this</span>.handleSwitchColor.bind(<span class="keyword">this</span>, <span class="string">"red"</span>)&#125;</span><br><span class="line">                &gt;</span><br><span class="line">                    设置主题颜色red</span><br><span class="line">                &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;button</span></span><br><span class="line"><span class="regexp">                    style=&#123;&#123; color: this.props.themeColor &#125;&#125;</span></span><br><span class="line"><span class="regexp">                    onClick=&#123;this.handleSwitchColor.bind(this, "green")&#125;</span></span><br><span class="line"><span class="regexp">                &gt;</span></span><br><span class="line"><span class="regexp">                    设置主题颜色green</span></span><br><span class="line"><span class="regexp">                &lt;/</span>button&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function mapStateToProps(state, props) &#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">        themeColor: state.themeColor</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function mapDispatchToProps(dispatch, props) &#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">        switchColor: (color) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">            dispatch(&#123; type: "CHANGE_THEME_COLOR", themeColor: color &#125;);</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default connect(mapStateToProps, mapDispatchToProps)(ThemeSwitch);</span></span><br></pre></td></tr></table></figure><p>这时候这三个组件的重构都已经完成了，代码大大减少、不依赖 context，并且功能和原来一样。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://huziketang.mangojuice.top/books/react/" target="_blank" rel="noopener">http://huziketang.mangojuice.top/books/react/</a></p>]]></content>
    
    <summary type="html">
    
      通过解决实际遇到问题来了解 react-redux 的用法和设计原理。
    
    </summary>
    
      <category term="javascript" scheme="https://daihaoxin.github.io/categories/javascript/"/>
    
    
      <category term="动手模拟" scheme="https://daihaoxin.github.io/tags/%E5%8A%A8%E6%89%8B%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="react" scheme="https://daihaoxin.github.io/tags/react/"/>
    
      <category term="redux" scheme="https://daihaoxin.github.io/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>动手实现react-redux之三connect 和 mapStateToProps</title>
    <link href="https://daihaoxin.github.io/post/e08ec58f.html"/>
    <id>https://daihaoxin.github.io/post/e08ec58f.html</id>
    <published>2019-02-18T12:55:00.000Z</published>
    <updated>2019-03-17T06:19:04.447Z</updated>
    
    <content type="html"><![CDATA[<p>仔细看上一节完成的组件会发现两个问题：</p><ol><li>每个组件中都有大量重复获取 context ，添加 store 监听的逻辑</li><li>每个组件都依赖于 context ，使组件基本丧失了可复用性。</li></ol><p>对于第一个大量重复逻辑的问题，可以通过高阶组件抽取重复的逻辑来解决。高阶组件就是一个函数，传给它一个组件，它返回一个新的组件，它的作用就是用于代码复用，可以把组件之间可复用的代码、逻辑抽离到高阶组件当中。新的组件和传入的组件通过 props 传递信息</p><p>对于第二个问题，首先需要知道可复用组件需要具有什么样的特征，在 React 中，如果一个组件的渲染只依赖于外界传进去的 props 和自己的 state，而并不依赖于其他的任何外界数据，也就是说像纯函数一样，给它什么，它就吐出（渲染）什么出来。这种组件的复用性是最强的，别人使用的时候根本不用担心任何事情，只要看看 PropTypes 它能接受什么参数，然后把参数传进去控制它就行了。</p><p>有了思路，下面就来修改代码，首先需要一个高阶组件来协助从 context 中获取数据，然后用一个傻瓜组件来帮助提交组件的复用性。</p><p>将这个高阶组件命名为 connect，他的作用是将 context 和 可复用组件连接起来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">"prop-types"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect = <span class="function">(<span class="params">WrappedComponent</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Connect</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> contextTypes = &#123;</span><br><span class="line">            store: PropTypes.object</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 如何从 store 取数据？</span></span><br><span class="line">        </span><br><span class="line">        render() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">    return Connect;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br></pre></td></tr></table></figure><p>connect 函数接受一个组件 WrappedComponent 作为参数，把这个组件包含在一个新的组件 Connect 里面，Connect 会去 context 里面取出 store。现在要把 store 里面的数据取出来通过 props 传给 WrappedComponent。</p><p>但是每个传进去的组件需要 store 里面的数据都不一样的，所以除了给高阶组件传入 Dumb 组件以外，还需要告诉高级组件我们需要什么数据，高阶组件才能正确地去取数据。为了解决这个问题，我们可以给高阶组件传入类似下面这样的函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state,props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        themeColor: state.themeColor,</span><br><span class="line">        themeName: state.themeName,</span><br><span class="line">        fullName: <span class="string">`<span class="subst">$&#123;state.firstName&#125;</span> <span class="subst">$&#123;state.lastName&#125;</span>`</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>这个函数会接受 store.getState() 的结果和给 WrappedComponent 传递的 props 作为参数，然后返回一个对象。mapStateTopProps 相当于告知了 Connect 应该如何去 store 里面取数据，然后可以把这个函数的返回结果传给被包装的组件。</p><p>connect 现在是接受一个参数 mapStateToProps，然后返回一个函数，这个返回的函数才是高阶组件。它会接受一个组件作为参数，然后用 Connect 把组件包装以后再返回。 connect 的用法是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        themeColor: state.themeColor</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">Header = connect(mapStateToProps)(Header);</span><br></pre></td></tr></table></figure></p><p>现在根据上面的描述，给 connect 加上 mapStateToProps 和 数据变化的监听，connect 完整的代码应该是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">"prop-types"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params">mapStateToProps</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">WrappedComponent</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Connect</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">            <span class="keyword">static</span> contextTypes = &#123;</span><br><span class="line">                store: PropTypes.object</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line">            state = &#123;</span><br><span class="line">                allProps: &#123;&#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line">            componentWillMount() &#123;</span><br><span class="line">                <span class="keyword">const</span> &#123; store &#125; = <span class="keyword">this</span>.context;</span><br><span class="line">                <span class="comment">// 挂载的时候，进行第一次渲染</span></span><br><span class="line">                <span class="keyword">this</span>.updateProps();</span><br><span class="line">                <span class="comment">// 然后订阅 store 的后续变化，并更新</span></span><br><span class="line">                store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.updateProps());</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            updateProps() &#123;</span><br><span class="line">                <span class="keyword">const</span> &#123; store &#125; = <span class="keyword">this</span>.context;</span><br><span class="line">                <span class="keyword">const</span> state = store.getState();</span><br><span class="line">                <span class="comment">// 额外传入 props，让获取数据更加灵活方便</span></span><br><span class="line">                <span class="keyword">let</span> stateProps = mapStateToProps(state, <span class="keyword">this</span>.props);</span><br><span class="line">                <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                    <span class="comment">// 整合普通的 props 和从 state 生成的 props</span></span><br><span class="line">                    allProps: &#123;</span><br><span class="line">                        ...this.props,</span><br><span class="line">                        ...stateProps</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            render() &#123;</span><br><span class="line">                <span class="comment">// let &#123;  &#125; = this.props;</span></span><br><span class="line">                <span class="keyword">return</span> (</span><br><span class="line">                    &lt;WrappedComponent &#123;...this.state.allProps&#125; /&gt;</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Connect;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect;</span><br></pre></td></tr></table></figure><p>组件 Connect 的 state.allProps，它是一个对象，用来保存需要传给被包装组件的所有的参数。生命周期 componentWillMount 会调用调用 updateProps 进行初始化，然后通过 store.subscribe 监听数据变化重新调用 updateProps。</p><p>为了让 connect 返回新组件和被包装的组件使用参数保持一致，我们会把所有传给 Connect 的 props 原封不动地传给 WrappedComponent。所以在 updateProps 里面会把 stateProps 和 this.props 合并到 this.state.allProps 里面，再通过 render 方法把所有参数都传给 WrappedComponent。</p><p>现在使用 connect 修改 Header.js、Content.js。</p><p>src/Header.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">"prop-types"</span>;</span><br><span class="line"><span class="keyword">import</span> connect <span class="keyword">from</span> <span class="string">"./connect"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">        color: PropTypes.string</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;h1 style=&#123;&#123; <span class="attr">color</span>: <span class="keyword">this</span>.props.themeColor &#125;&#125;&gt;React-Redux是什么&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function mapStateToProps(state, props) &#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">        themeColor: state.themeColor</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default connect(mapStateToProps)(Header);</span></span><br></pre></td></tr></table></figure></p><p>src/Content.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">"prop-types"</span>;</span><br><span class="line"><span class="keyword">import</span> connect <span class="keyword">from</span> <span class="string">"./connect"</span>;</span><br><span class="line"><span class="keyword">import</span> ThemeSwitch <span class="keyword">from</span> <span class="string">"./ThemeSwitch"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Content</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">        themeColor: PropTypes.string</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div style=&#123;&#123; <span class="attr">color</span>: <span class="keyword">this</span>.props.themeColor &#125;&#125;&gt;</span><br><span class="line">                &lt;p&gt;React-Redux是Redux的官方React绑定库。它能够使你的React组件从Redux store中读取数据，并且向store分发actions以更新数据&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;ThemeSwitch /</span>&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function mapStateToProps(state) &#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">        themeColor: state.themeColor</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default connect(mapStateToProps)(Content);</span></span><br></pre></td></tr></table></figure></p><p>现在通过 connect 抽取了使用 context 产生的重复逻辑，并提高了 Header 和 Context 组件的复用性，后面继续重构 ThemeSwitch 组件。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://huziketang.mangojuice.top/books/react/" target="_blank" rel="noopener">http://huziketang.mangojuice.top/books/react/</a></p>]]></content>
    
    <summary type="html">
    
      通过解决实际遇到问题来了解 react-redux 的用法和设计原理。
    
    </summary>
    
      <category term="javascript" scheme="https://daihaoxin.github.io/categories/javascript/"/>
    
    
      <category term="动手模拟" scheme="https://daihaoxin.github.io/tags/%E5%8A%A8%E6%89%8B%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="react" scheme="https://daihaoxin.github.io/tags/react/"/>
    
      <category term="redux" scheme="https://daihaoxin.github.io/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>动手实现react-redux之二组合context和store</title>
    <link href="https://daihaoxin.github.io/post/ff5d605f.html"/>
    <id>https://daihaoxin.github.io/post/ff5d605f.html</id>
    <published>2019-02-18T12:50:00.000Z</published>
    <updated>2019-03-17T06:19:04.447Z</updated>
    
    <content type="html"><![CDATA[<p>在 src/index.js 中添加模拟 redux 时创建的 createStore 函数，并创建一个 themeReducer 用来初始化 state 并维护 state 的更新，通过 themeReducer 生成一个 store。然后将 store 放到 Index 组件的 context 里面，这个每个子组件都可以获取到 store 了。</p><p>修改 src/index.js:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">"prop-types"</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">"./Header"</span>;</span><br><span class="line"><span class="keyword">import</span> Content <span class="keyword">from</span> <span class="string">"./Content"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"./index.css"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStore</span>(<span class="params">reducer</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> events = [];</span><br><span class="line">    <span class="keyword">let</span> state = <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> store = &#123;</span><br><span class="line">        subscribe: <span class="function">(<span class="params">event</span>) =&gt;</span> events.push(event),</span><br><span class="line">        dispatch: <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">            state = reducer(state, action);</span><br><span class="line">            events.forEach(<span class="function">(<span class="params">event</span>) =&gt;</span> event());</span><br><span class="line">        &#125;,</span><br><span class="line">        getState: <span class="function"><span class="params">()</span> =&gt;</span> state</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 初始化state</span></span><br><span class="line">    store.dispatch(&#123;&#125;);</span><br><span class="line">    <span class="keyword">return</span> store;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">themeReducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!state) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            themeColor: <span class="string">"red"</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"CHANGE_THEME_COLOR"</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123; ...state, <span class="attr">themeColor</span>: action.themeColor &#125;;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(themeReducer);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> childContextTypes = &#123;</span><br><span class="line">        store: PropTypes.object</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    getChildContext() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            store</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;Header /&gt;</span><br><span class="line">                &lt;Content /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">    &lt;Index /</span>&gt;,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>然后修改 src/Header.js 和 src/Context.js，让它从 Index 的 context 里面获取 store，并且获取里面的 themeColor 状态来设置自己的颜色。</p><p>src/Header.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">"prop-types"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> contextTypes = &#123;</span><br><span class="line">        store: PropTypes.object</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    state = &#123;</span><br><span class="line">        themeColor: <span class="string">""</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    componentWillMount() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; store &#125; = <span class="keyword">this</span>.context;</span><br><span class="line">        <span class="comment">// 挂载的时候，进行第一次渲染</span></span><br><span class="line">        <span class="keyword">this</span>.updateThemeColor();</span><br><span class="line">        <span class="comment">// 然后订阅 store 的后续变化，并更新</span></span><br><span class="line">        store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.updateThemeColor());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    updateThemeColor() &#123;</span><br><span class="line">        <span class="keyword">let</span> state = <span class="keyword">this</span>.context.store.getState();</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            themeColor: state.themeColor</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// static getDerivedStateFromProps(nextProps, prevState) &#123;</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;h1 style=&#123;&#123; <span class="attr">color</span>: <span class="keyword">this</span>.state.themeColor &#125;&#125;&gt;React-Redux是什么&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Header;</span></span><br></pre></td></tr></table></figure></p><p>src/Context.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">"prop-types"</span>;</span><br><span class="line"><span class="keyword">import</span> ThemeSwitch <span class="keyword">from</span> <span class="string">"./ThemeSwitch"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Content</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> contextTypes = &#123;</span><br><span class="line">        store: PropTypes.object</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    componentWillMount() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; store &#125; = <span class="keyword">this</span>.context;</span><br><span class="line">        <span class="comment">// 挂载的时候，进行第一次渲染</span></span><br><span class="line">        <span class="keyword">this</span>.updateThemeColor();</span><br><span class="line">        <span class="comment">// 然后订阅 store 的后续变化，并更新</span></span><br><span class="line">        store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.updateThemeColor());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    updateThemeColor() &#123;</span><br><span class="line">        <span class="keyword">let</span> state = <span class="keyword">this</span>.context.store.getState();</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            themeColor: state.themeColor</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div style=&#123;&#123; <span class="attr">color</span>: <span class="keyword">this</span>.state.themeColor &#125;&#125;&gt;</span><br><span class="line">                &lt;p&gt;React-Redux是Redux的官方React绑定库。它能够使你的React组件从Redux store中读取数据，并且向store分发actions以更新数据&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;ThemeSwitch /</span>&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Content;</span></span><br></pre></td></tr></table></figure><p>修改 src/ThemeSwitch.js，添加颜色更新及两个按钮的点击事件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">"prop-types"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThemeSwitch</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> contextTypes = &#123;</span><br><span class="line">        store: PropTypes.object</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    state = &#123;</span><br><span class="line">        themeColor: <span class="string">""</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    componentWillMount() &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123; store &#125; = <span class="keyword">this</span>.context;</span><br><span class="line">        <span class="keyword">this</span>.updateThemeColor();</span><br><span class="line">        store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.updateThemeColor();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    updateThemeColor() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; store &#125; = <span class="keyword">this</span>.context;</span><br><span class="line">        <span class="keyword">const</span> state = store.getState();</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123; <span class="attr">themeColor</span>: state.themeColor &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 更新store中的颜色</span></span><br><span class="line">    handleSwitchColor(color) &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123; store &#125; = <span class="keyword">this</span>.context;</span><br><span class="line">        store.dispatch(&#123;</span><br><span class="line">            type: <span class="string">"CHANGE_THEME_COLOR"</span>,</span><br><span class="line">            themeColor: color</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button</span><br><span class="line">                    style=&#123;&#123; <span class="attr">color</span>: <span class="keyword">this</span>.state.themeColor &#125;&#125;</span><br><span class="line">                    onClick=&#123;<span class="keyword">this</span>.handleSwitchColor.bind(<span class="keyword">this</span>, <span class="string">"red"</span>)&#125;</span><br><span class="line">                &gt;</span><br><span class="line">                    设置主题颜色red</span><br><span class="line">                &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;button</span></span><br><span class="line"><span class="regexp">                    style=&#123;&#123; color: this.state.themeColor &#125;&#125;</span></span><br><span class="line"><span class="regexp">                    onClick=&#123;this.handleSwitchColor.bind(this, "green")&#125;</span></span><br><span class="line"><span class="regexp">                &gt;</span></span><br><span class="line"><span class="regexp">                    设置主题颜色green</span></span><br><span class="line"><span class="regexp">                &lt;/</span>button&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default ThemeSwitch;</span></span><br></pre></td></tr></table></figure></p><p>到此 store 和 context 已经结合起来，看起来功能完成的不错，就是代码稍微啰嗦，后面继续优化。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://huziketang.mangojuice.top/books/react/" target="_blank" rel="noopener">http://huziketang.mangojuice.top/books/react/</a></p>]]></content>
    
    <summary type="html">
    
      通过解决实际遇到问题来了解 react-redux 的用法和设计原理。
    
    </summary>
    
      <category term="javascript" scheme="https://daihaoxin.github.io/categories/javascript/"/>
    
    
      <category term="动手模拟" scheme="https://daihaoxin.github.io/tags/%E5%8A%A8%E6%89%8B%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="react" scheme="https://daihaoxin.github.io/tags/react/"/>
    
      <category term="redux" scheme="https://daihaoxin.github.io/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>动手实现react-redux之一初步</title>
    <link href="https://daihaoxin.github.io/post/e5e94e1.html"/>
    <id>https://daihaoxin.github.io/post/e5e94e1.html</id>
    <published>2019-02-18T12:45:00.000Z</published>
    <updated>2019-03-17T06:19:04.447Z</updated>
    
    <content type="html"><![CDATA[<p>通过 redux 动手实现可以看到它并不复杂，很多看起来奇怪的约定或者约束都是为了解决特定问题而存在的，把这些问题想清楚之后就不难理解那些奇怪的约定了，下面我们试着来实现下可以使 React 和 redux 相互结合一个库 react-redux。</p><p>在 React 中应用的状态存在可能被多个组件依赖或者影响，而 React 并没有提供很好的解决方案，我们只能把状态提升到依赖或者影响这个状态的所有组件的公共父组件上，我们把这种行为叫做状态提升。但是需求不停变化，导致状态一直在不断的提升，然后一层层的传递，这显然不是我们想要的。</p><p>后来 React 提供了 context 的概念，将共享状态放到父组件的 context 上，这个父组件下所有的子组件 都可以从 context 中直接获取状态，而不要一层层传递了。但是直接从 context 里面存放、获取数据增强了组件的耦合性；并且所有组件都可以修改 context 里面的状态就像谁都可以修改共享状态一样，导致让程序不可预测。</p><p>而 redux 中的 store 的数据不是谁都能修改，而是约定只能通过 dispatch 来进行修改，这样的话将 redux 和 context 结合起来，每个组件既可以去 context 里面获取 store 从而获取状态，又不用担心它们乱改数据了。下面我们来试一下。</p><p>使用 create-react-app 新建一个工程，然后安装 prop-types , 删除 src 下面除 <code>index.js</code>和<code>index.css</code>之外的文件，然后在 src 下面新建三个文件 Header.js、Content.js、ThemeSwitch.js。</p><p>src/Header.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">"prop-types"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;h1&gt;React-Redux是什么&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Header;</span></span><br></pre></td></tr></table></figure><p>src/ThemeSwitch.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">"prop-types"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThemeSwitch</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button&gt;设置主题颜色red&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;button&gt;设置主题颜色green&lt;/</span>button&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default ThemeSwitch;</span></span><br></pre></td></tr></table></figure><p>src/Content.js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">"prop-types"</span>;</span><br><span class="line"><span class="keyword">import</span> ThemeSwitch <span class="keyword">from</span> <span class="string">"./ThemeSwitch"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Content</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;p&gt;React-Redux是Redux的官方React绑定库。它能够使你的React组件从Redux store中读取数据，并且向store分发actions以更新数据&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;ThemeSwitch /</span>&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Content;</span></span><br></pre></td></tr></table></figure><p>修改 src/index.js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">"prop-types"</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">"./Header"</span>;</span><br><span class="line"><span class="keyword">import</span> Content <span class="keyword">from</span> <span class="string">"./Content"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"./index.css"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;Header /&gt;</span><br><span class="line">                &lt;Content /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">    &lt;Index /</span>&gt;,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>然后 <code>npm start</code> 启动项目，打开页面就可以看到效果。</p><p>目前只是完成项目搭建，状态和逻辑都还没添加，后面继续。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://huziketang.mangojuice.top/books/react/" target="_blank" rel="noopener">http://huziketang.mangojuice.top/books/react/</a></p>]]></content>
    
    <summary type="html">
    
      通过解决实际遇到问题来了解 react-redux 的用法和设计原理。
    
    </summary>
    
      <category term="javascript" scheme="https://daihaoxin.github.io/categories/javascript/"/>
    
    
      <category term="动手模拟" scheme="https://daihaoxin.github.io/tags/%E5%8A%A8%E6%89%8B%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="react" scheme="https://daihaoxin.github.io/tags/react/"/>
    
      <category term="redux" scheme="https://daihaoxin.github.io/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>JS的宏任务和微任务</title>
    <link href="https://daihaoxin.github.io/post/54c4052.html"/>
    <id>https://daihaoxin.github.io/post/54c4052.html</id>
    <published>2019-02-16T07:07:00.000Z</published>
    <updated>2019-03-17T06:19:04.447Z</updated>
    
    <content type="html"><![CDATA[<h2 id="执行机制"><a href="#执行机制" class="headerlink" title="执行机制"></a>执行机制</h2><p><img src="/images/宏任务和微任务-01.png" alt=""></p><p>注意: 主线程中的代码执行也是宏任务，在主线程代码执行结束后，会先去检查也没有微任务，如果有先执行微任务，然后再去查看事件队列中还有没有需要执行的宏任务。</p><p>宏任务的优先级: 主代码块 &gt; setImmediate &gt; MessageChannel &gt; requestAnimationFrame &gt; setTimeout / setInterval<br>微任务的优先级: process.nextTick &gt; Promise &gt; MutationObserver</p><p>如果在一个微任务中递归新增微任务，是可以造成类似死循环的效果</p><h2 id="async-await函数"><a href="#async-await函数" class="headerlink" title="async/await函数"></a>async/await函数</h2><p>因为，async/await本质上还是基于Promise的一些封装，而Promise是属于微任务的一种。所以在使用await关键字与Promise.then效果类似，</p><p>async函数在await之前的代码都是同步执行的，可以理解为await之前的代码属于new Promise时传入的代码，await之后的所有代码都是在Promise.then中的回调</p><h2 id="浏览器中的表现"><a href="#浏览器中的表现" class="headerlink" title="浏览器中的表现"></a>浏览器中的表现</h2><p>在上边简单的说明了两种任务的差别，以及Event Loop的作用，那么在真实的浏览器中是什么表现呢？</p><p>假设有这样的一些DOM结构：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#outer</span> &#123;</span></span><br><span class="line"><span class="undefined">            padding: 20px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#616161</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="css">        <span class="selector-id">#inner</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 100px;</span></span><br><span class="line"><span class="undefined">            height: 100px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#757575</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"inner"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> $inner = <span class="built_in">document</span>.querySelector(<span class="string">"#inner"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> $outer = <span class="built_in">document</span>.querySelector(<span class="string">"#outer"</span>);</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">handler</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"click"</span>); <span class="comment">// 直接输出</span></span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="javascript">            <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">_</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"promise"</span>)); <span class="comment">// 注册微任务</span></span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="javascript">            setTimeout(<span class="function"><span class="params">_</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"timeout"</span>)); <span class="comment">// 注册宏任务</span></span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="javascript">            requestAnimationFrame(<span class="function"><span class="params">_</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"animationFrame"</span>)); <span class="comment">// 注册宏任务</span></span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="javascript">            $outer.setAttribute(<span class="string">"data-random"</span>, <span class="built_in">Math</span>.random()); <span class="comment">// DOM属性修改，触发微任务</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 注册微任务</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> MutationObserver(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"observer"</span>);</span></span><br><span class="line"><span class="undefined">        &#125;).observe($outer, &#123;</span></span><br><span class="line"><span class="actionscript">            attributes: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        $inner.addEventListener(<span class="string">"click"</span>, handler);</span></span><br><span class="line"><span class="actionscript">        $outer.addEventListener(<span class="string">"click"</span>, handler);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果点击#inner，其执行顺序一定是：click -&gt; promise -&gt; observer -&gt; click -&gt; promise -&gt; observer -&gt; animationFrame -&gt; animationFrame -&gt; timeout -&gt; timeout。</p><p>因为 click 触发了一个宏任务 handler，按照代码中的注释，在同步的代码已经执行完以后，这时就会去查看是否有微任务可以执行，然后发现了  Promise 和 MutationObserver 两个微任务，遂执行之。</p><p>因为click事件会冒泡，所以同时也触发了 #outer 的 click 事件，再次执行了 handler 函数，这个是一个同步的过程，所以会优先执行冒泡的事件(早于其他的宏任务)，重复 #inner 的结果。</p><p>在执行完同步代码与微任务以后，这时继续向后查找有木有宏任务，然后执行了 animationFrame 和 timeout。<br>需要注意的一点是，因为我们触发了 setAttribute ，实际上修改了 DOM 的属性，这会导致页面的重绘，而这个 setAttribute  的操作是同步执行的，也就是说requestAnimationFrame的回调会早于setTimeout所执行。</p><h2 id="在Node中的表现"><a href="#在Node中的表现" class="headerlink" title="在Node中的表现"></a>在Node中的表现</h2><p>Node也是单线程，但是在处理Event Loop上与浏览器稍微有些不同，就单从API层面上来理解，Node新增了两个方法可以用来使用：微任务的process.nextTick以及宏任务的setImmediate。</p><h3 id="setImmediate与setTimeout的区别"><a href="#setImmediate与setTimeout的区别" class="headerlink" title="setImmediate与setTimeout的区别"></a>setImmediate与setTimeout的区别</h3><p>在官方文档中的定义，setImmediate 为一次 Event Loop 执行完毕后调用。setTimeout 则是通过计算一个延迟时间后进行执行。</p><p>但是同时还提到了如果在主进程中直接执行这两个操作，很难保证哪个会先触发。因为如果主进程中先注册了两个任务，然后执行的代码耗时超过setTimeout 的延迟时间，而这时定时器已经处于可执行回调的状态了。所以会先执行定时器，而执行完定时器以后才是结束了一次 Event Loop ，这时才会执行 setImmediate 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">_</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>))</span><br><span class="line">setImmediate(<span class="function"><span class="params">_</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'setImmediate'</span>))</span><br></pre></td></tr></table></figure><p>有兴趣的可以自己试验一下，执行多次真的会得到不同的结果。</p><p><img src="/images/宏任务和微任务-02.png" alt=""></p><p>但是如果后续添加一些代码以后，就可以保证setTimeout一定会在setImmediate之前触发了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">_</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"setTimeout"</span>));</span><br><span class="line">setImmediate(<span class="function"><span class="params">_</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"setImmediate"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> countdown = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们确保这个循环的执行速度会超过定时器的倒计时，导致这轮循环没有结束时，setTimeout已经可以执行回调了，所以会先执行`setTimeout`再结束这一轮循环，也就是说开始执行`setImmediate`</span></span><br><span class="line"><span class="keyword">while</span> (countdown--) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在另一个宏任务中，必然是setImmediate先执行：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'fs'</span>).readFile(__dirname, _ =&gt; &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">_</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'timeout'</span>))</span><br><span class="line">  setImmediate(<span class="function"><span class="params">_</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'immediate'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果使用一个设置了延迟的setTimeout也可以实现相同的效果</span></span><br></pre></td></tr></table></figure></p><h3 id="process-nextTick"><a href="#process-nextTick" class="headerlink" title="process.nextTick"></a>process.nextTick</h3><p>这个可以认为是一个类似于 Promise 和 MutationObserver 的微任务实现，在代码执行的过程中可以随时插入 nextTick ，并且会保证在下一个宏任务开始之前所执行。</p><p>在使用方面的一个最常见的例子就是一些事件绑定类的操作：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Lib extends require("events").EventEmitter &#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.emit(<span class="string">"init"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lib = <span class="keyword">new</span> Lib();</span><br><span class="line"></span><br><span class="line">lib.on(<span class="string">"init"</span>, _ =&gt; &#123;</span><br><span class="line">    <span class="comment">// 这里将永远不会执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"init!"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>因为上述的代码在实例化Lib对象时是同步执行的，在实例化完成以后就立马发送了init事件。而这时在外层的主程序还没有开始执行到lib.on(‘init’)监听事件的这一步。所以会导致发送事件时没有回调，回调注册后事件不会再次发送。</p><p>我们可以很轻松的使用process.nextTick来解决这个问题：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Lib extends require("events").EventEmitter &#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        </span><br><span class="line">        process.nextTick(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.emit(<span class="string">"init"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 同理使用其他的微任务</span></span><br><span class="line">        <span class="comment">// 比如Promise.resolve().then(_ =&gt; this.emit('init'))</span></span><br><span class="line">        <span class="comment">// 也可以实现相同的效果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样会在主进程的代码执行完毕后，程序空闲时触发Event Loop流程查找有没有微任务，然后再发送init事件。<br>递归调用<code>process.nextTick</code>会导致报警，后续的代码永远不会被执行，这是对的，</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://mbd.baidu.com/newspage/data/landingsuper?context=%7B%22nid%22%3A%22news_9060940668586593086%22%7D&amp;n_type=1&amp;p_from=3" target="_blank" rel="noopener">https://mbd.baidu.com/newspage/data/landingsuper?context=%7B%22nid%22%3A%22news_9060940668586593086%22%7D&amp;n_type=1&amp;p_from=3</a></p><p><a href="https://www.cnblogs.com/jiasm/p/9482443.html" target="_blank" rel="noopener">https://www.cnblogs.com/jiasm/p/9482443.html</a></p>]]></content>
    
    <summary type="html">
    
      宏任务和微任务有渐渐成为面试主力的趋势
    
    </summary>
    
      <category term="javascript" scheme="https://daihaoxin.github.io/categories/javascript/"/>
    
    
      <category term="JS基础笔记" scheme="https://daihaoxin.github.io/tags/JS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>redux手动实现之五终篇</title>
    <link href="https://daihaoxin.github.io/post/d60b308f.html"/>
    <id>https://daihaoxin.github.io/post/d60b308f.html</id>
    <published>2019-02-15T07:20:00.000Z</published>
    <updated>2019-03-17T06:19:04.447Z</updated>
    
    <content type="html"><![CDATA[<p>现在已经完成了一个很通用的 createStore ，并且使用起来也很容易，性能也ok。重新审视一下我们代码，发现 stateChanger 第一个参数 state 就是 createStore 第一个参数的 state，两者其实都是全局变量 appState , 那么是否可以将 appState 和 stateChanger 合并到一起？ 这样使用 createStore 的时候就可以不用关注 state , 也避免了无意中的 <code>state.title.text=&quot;xxx&quot;</code> 这样的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stateChanger</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!state)&#123;</span><br><span class="line">        state = &#123;</span><br><span class="line">            title: &#123;</span><br><span class="line">                text: <span class="string">"redux"</span>,</span><br><span class="line">                color: <span class="string">"red"</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            content: &#123;</span><br><span class="line">                text: <span class="string">"redux文档内容"</span>,</span><br><span class="line">                color: <span class="string">"blue"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"UPDATE_TITLE_TEXT"</span>: &#123;</span><br><span class="line">            state.title.text = action.text;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"UPDATE_TITLE_COLOR"</span>: &#123;</span><br><span class="line">            state.title.color = action.color;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时 stateChanger 就同时拥有了初始化和修改 state 的能力，如果有传入 state 就生成更新数据，否则就是初始化数据。</p><p>现在可以优化 createStore 为一个参数，将原来的参数 state 变为一个局部遍历，在完成 createStore 的操作之前，通过触发一个空操作，完成局部变量 state 的初始化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStore</span>(<span class="params">stateChanger</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> state = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> events = [];</span><br><span class="line">    <span class="keyword">let</span> store = &#123;</span><br><span class="line">        subscribe: <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            events.push(event);</span><br><span class="line">        &#125;,</span><br><span class="line">        dispatch: <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 每次修改之后， 获取新的state</span></span><br><span class="line">            state = stateChanger(state, action);</span><br><span class="line">            events.forEach(<span class="function">(<span class="params">event</span>) =&gt;</span> event());</span><br><span class="line">        &#125;,</span><br><span class="line">        getState: <span class="function"><span class="params">()</span> =&gt;</span> state</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 触发一个空操作， 初始化 state</span></span><br><span class="line">    store.dispatch(&#123;&#125;);</span><br><span class="line">    <span class="keyword">return</span> store;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们就拥有了一个最终形态的 createStore ， 它接收一个可以根据 <code>action</code> 修改 state 的函数，这个函数是一个不依赖外部数据，并且没有副作用的<a href="https://www.cnblogs.com/Yang-kid/archive/2018/09/12/9637200.html" target="_blank" rel="noopener">纯函数</a>（Pure Function），现在我们把 stateChanger 改为 reducer 就完全符合 redux 的 api 了。</p><p>完整代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'title'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'content'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// const appState = &#123;</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//     title: &#123;</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//         text: "redux",</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//         color: "red",</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//     &#125;,</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//     content: &#123;</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//         text: "redux文档内容",</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//         color: "blue"</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// &#125;;</span></span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">reducer</span><span class="params">(state, action)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (!state) &#123;</span></span><br><span class="line"><span class="undefined">                state = &#123;</span></span><br><span class="line"><span class="undefined">                    title: &#123;</span></span><br><span class="line"><span class="actionscript">                        text: <span class="string">"redux"</span>,</span></span><br><span class="line"><span class="actionscript">                        color: <span class="string">"red"</span>,</span></span><br><span class="line"><span class="undefined">                    &#125;,</span></span><br><span class="line"><span class="undefined">                    content: &#123;</span></span><br><span class="line"><span class="actionscript">                        text: <span class="string">"redux文档内容"</span>,</span></span><br><span class="line"><span class="actionscript">                        color: <span class="string">"blue"</span></span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">switch</span> (action.type) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">case</span> <span class="string">"UPDATE_TITLE_TEXT"</span>:</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> &#123; <span class="comment">// 构建新的对象并且返回</span></span></span><br><span class="line"><span class="undefined">                        ...state,</span></span><br><span class="line"><span class="undefined">                        title: &#123;</span></span><br><span class="line"><span class="undefined">                            ...state.title,</span></span><br><span class="line"><span class="undefined">                            text: action.text</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    &#125;;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">case</span> <span class="string">"UPDATE_TITLE_COLOR"</span>:</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> &#123; <span class="comment">// 构建新的对象并且返回</span></span></span><br><span class="line"><span class="undefined">                        ...state,</span></span><br><span class="line"><span class="undefined">                        title: &#123;</span></span><br><span class="line"><span class="undefined">                            ...state.title,</span></span><br><span class="line"><span class="undefined">                            color: action.color</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    &#125;;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">default</span>:</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> state; <span class="comment">// 没有修改，返回原来的对象</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 添加 createStore</span></span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">createStore</span><span class="params">(stateChanger)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> state = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> events = [];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> store = &#123;</span></span><br><span class="line"><span class="javascript">                subscribe: <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="undefined">                    events.push(event);</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="javascript">                dispatch: <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 每次修改之后， 获取新的state</span></span></span><br><span class="line"><span class="undefined">                    state = stateChanger(state, action);</span></span><br><span class="line"><span class="javascript">                    events.forEach(<span class="function">(<span class="params">event</span>) =&gt;</span> event());</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="javascript">                getState: <span class="function"><span class="params">()</span> =&gt;</span> state</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 触发一个空操作， 初始化 state</span></span></span><br><span class="line"><span class="undefined">            store.dispatch(&#123;&#125;);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> store;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">renderTitle</span><span class="params">(newTitle, oldTile = &#123;&#125;)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (newTitle === oldTile) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">// 数据没有变化就不渲染了</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"render title..."</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> titleDom = <span class="built_in">document</span>.querySelector(<span class="string">"#title"</span>);</span></span><br><span class="line"><span class="undefined">            titleDom.innerHTML = newTitle.text;</span></span><br><span class="line"><span class="undefined">            titleDom.style.color = newTitle.color;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">renderContent</span><span class="params">(newContent, oldContent = &#123;&#125;)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (newContent === oldContent) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">// 数据没有变化就不渲染了</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"render content..."</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> contentDom = <span class="built_in">document</span>.querySelector(<span class="string">"#content"</span>);</span></span><br><span class="line"><span class="undefined">            contentDom.innerHTML = newContent.text;</span></span><br><span class="line"><span class="undefined">            contentDom.style.color = newContent.color;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">renderApp</span><span class="params">(newAppState, oldAppState = &#123;&#125;)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (newAppState === oldAppState) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">// 数据没有变化就不渲染了</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"render app..."</span>);</span></span><br><span class="line"><span class="undefined">            renderTitle(newAppState.title, oldAppState.title);</span></span><br><span class="line"><span class="undefined">            renderContent(newAppState.content, oldAppState.content);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 生成 store</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> store = createStore(reducer);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 缓存旧的state</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> oldState = store.getState();</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 监听数据变化</span></span></span><br><span class="line"><span class="javascript">        store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 获取新的 state</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> newState = store.getState();</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 把新旧的 state 传进去渲染</span></span></span><br><span class="line"><span class="undefined">            renderApp(newState, oldState);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 新的 newState 变成了旧的 oldState，等待下一次数据变化重新渲染</span></span></span><br><span class="line"><span class="undefined">            oldState = newState;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">        renderApp(store.getState());</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 三秒钟之后，修改标题和标题颜色，并重新渲染</span></span></span><br><span class="line"><span class="actionscript">        setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            store.dispatch(&#123; type: <span class="string">"UPDATE_TITLE_TEXT"</span>, text: <span class="string">"Redux是React是好基友"</span> &#125;);</span></span><br><span class="line"><span class="actionscript">            store.dispatch(&#123; type: <span class="string">"UPDATE_TITLE_COLOR"</span>, color: <span class="string">"green"</span> &#125;);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// renderApp(store.getState());</span></span></span><br><span class="line"><span class="undefined">        &#125;, 3000);</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://huziketang.mangojuice.top/books/react/" target="_blank" rel="noopener">http://huziketang.mangojuice.top/books/react/</a></p>]]></content>
    
    <summary type="html">
    
      redux在现在前端开发中是必须要了解学习的，通过模拟思路是一种极好的学习方式
    
    </summary>
    
      <category term="javascript" scheme="https://daihaoxin.github.io/categories/javascript/"/>
    
    
      <category term="动手模拟" scheme="https://daihaoxin.github.io/tags/%E5%8A%A8%E6%89%8B%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="react" scheme="https://daihaoxin.github.io/tags/react/"/>
    
      <category term="redux" scheme="https://daihaoxin.github.io/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>redux手动实现之四性能优化</title>
    <link href="https://daihaoxin.github.io/post/3d4efad1.html"/>
    <id>https://daihaoxin.github.io/post/3d4efad1.html</id>
    <published>2019-02-15T07:15:00.000Z</published>
    <updated>2019-03-17T06:19:04.447Z</updated>
    
    <content type="html"><![CDATA[<p>在上一节的代码中，其实存在一个很严重的性能问题。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderTitle</span>(<span class="params">title</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"render title..."</span>);</span><br><span class="line">    <span class="keyword">const</span> titleDom = <span class="built_in">document</span>.querySelector(<span class="string">"#title"</span>);</span><br><span class="line">    titleDom.innerHTML = title.text;</span><br><span class="line">    titleDom.style.color = title.color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderContent</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"render content..."</span>);</span><br><span class="line">    <span class="keyword">const</span> contentDom = <span class="built_in">document</span>.querySelector(<span class="string">"#content"</span>);</span><br><span class="line">    contentDom.innerHTML = content.text;</span><br><span class="line">    contentDom.style.color = content.color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderApp</span>(<span class="params">appState</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"render app..."</span>);</span><br><span class="line">    renderTitle(appState.title);</span><br><span class="line">    renderContent(appState.content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其他代码保持不变，依旧执行一次初始化渲染，和两次更新，然后打开控制台看下log<br><img src="/images/make-redux-401.png" alt=""></p><p>前三个是第一次渲染打印出来的。中间三个是第一次 store.dispatch 的结果，最后三个是第二次 store.dispatch 的结果。问题就是后两次的更新都没有改动 content 对象，只是修改了 title 对象。 renderContent 是不需要执行的，这里的操作需要优化。</p><p>可以通过在每个渲染函数执行渲染操作之前先做个判断，判断传入的新数据和旧的数据是不是相同，相同的话就不渲染了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderTitle</span>(<span class="params">newTitle, oldTile = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (newTitle === oldTile) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">// 数据没有变化就不渲染了</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"render title..."</span>);</span><br><span class="line">    <span class="keyword">const</span> titleDom = <span class="built_in">document</span>.querySelector(<span class="string">"#title"</span>);</span><br><span class="line">    titleDom.innerHTML = newTitle.text;</span><br><span class="line">    titleDom.style.color = newTitle.color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderContent</span>(<span class="params">newContent, oldContent = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (newContent === oldContent) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">// 数据没有变化就不渲染了</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"render content..."</span>);</span><br><span class="line">    <span class="keyword">const</span> contentDom = <span class="built_in">document</span>.querySelector(<span class="string">"#content"</span>);</span><br><span class="line">    contentDom.innerHTML = newContent.text;</span><br><span class="line">    contentDom.style.color = newContent.color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderApp</span>(<span class="params">newAppState, oldAppState = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (newAppState === oldAppState) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">// 数据没有变化就不渲染了</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"render app..."</span>);</span><br><span class="line">    renderTitle(newAppState.title, oldAppState.title);</span><br><span class="line">    renderContent(newAppState.content, oldAppState.content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们用一个 oldState 变量保存旧的应用状态，在需要重新渲染的时候把新旧数据传进入去：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成 store</span></span><br><span class="line"><span class="keyword">let</span> store = createStore(appState, stateChanger);</span><br><span class="line"><span class="comment">// 缓存旧的state</span></span><br><span class="line"><span class="keyword">let</span> oldState = store.getState();</span><br><span class="line"><span class="comment">// 监听数据变化</span></span><br><span class="line">store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取新的 state</span></span><br><span class="line">    <span class="keyword">let</span> newState = store.getState();</span><br><span class="line">    <span class="comment">// 把新旧的 state 传进去渲染</span></span><br><span class="line">    renderApp(newState, oldState);</span><br><span class="line">    <span class="comment">// 新的 newState 变成了旧的 oldState，等待下一次数据变化重新渲染</span></span><br><span class="line">    oldState = newState;</span><br><span class="line">&#125;);</span><br><span class="line">renderApp(store.getState());</span><br><span class="line"><span class="comment">// 三秒钟之后，修改标题和标题颜色，并重新渲染</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    store.dispatch(&#123; <span class="attr">type</span>: <span class="string">"UPDATE_TITLE_TEXT"</span>, <span class="attr">text</span>: <span class="string">"Redux是React是好基友"</span> &#125;);</span><br><span class="line">    store.dispatch(&#123; <span class="attr">type</span>: <span class="string">"UPDATE_TITLE_COLOR"</span>, <span class="attr">color</span>: <span class="string">"green"</span> &#125;);</span><br><span class="line">    <span class="comment">// renderApp(store.getState());</span></span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>我们的代码现在变成了这样：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'title'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'content'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> appState = &#123;</span></span><br><span class="line"><span class="undefined">            title: &#123;</span></span><br><span class="line"><span class="actionscript">                text: <span class="string">"redux"</span>,</span></span><br><span class="line"><span class="actionscript">                color: <span class="string">"red"</span>,</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            content: &#123;</span></span><br><span class="line"><span class="actionscript">                text: <span class="string">"redux文档内容"</span>,</span></span><br><span class="line"><span class="actionscript">                color: <span class="string">"blue"</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">stateChanger</span><span class="params">(state, action)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">switch</span> (action.type) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">case</span> <span class="string">"UPDATE_TITLE_TEXT"</span>: &#123;</span></span><br><span class="line"><span class="undefined">                    state.title.text = action.text;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">case</span> <span class="string">"UPDATE_TITLE_COLOR"</span>: &#123;</span></span><br><span class="line"><span class="undefined">                    state.title.color = action.color;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">default</span>:</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 添加 createStore</span></span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">createStore</span><span class="params">(state, stateChanger)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> events = [];</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                subscribe: <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="undefined">                    events.push(event);</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="javascript">                dispatch: <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="undefined">                    stateChanger(state, action);</span></span><br><span class="line"><span class="javascript">                    events.forEach(<span class="function">(<span class="params">event</span>) =&gt;</span> event());</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="javascript">                getState: <span class="function"><span class="params">()</span> =&gt;</span> state</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">renderTitle</span><span class="params">(newTitle, oldTile = &#123;&#125;)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (newTitle === oldTile) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">// 数据没有变化就不渲染了</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"render title..."</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> titleDom = <span class="built_in">document</span>.querySelector(<span class="string">"#title"</span>);</span></span><br><span class="line"><span class="undefined">            titleDom.innerHTML = newTitle.text;</span></span><br><span class="line"><span class="undefined">            titleDom.style.color = newTitle.color;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">renderContent</span><span class="params">(newContent, oldContent = &#123;&#125;)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (newContent === oldContent) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">// 数据没有变化就不渲染了</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"render content..."</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> contentDom = <span class="built_in">document</span>.querySelector(<span class="string">"#content"</span>);</span></span><br><span class="line"><span class="undefined">            contentDom.innerHTML = newContent.text;</span></span><br><span class="line"><span class="undefined">            contentDom.style.color = newContent.color;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">renderApp</span><span class="params">(newAppState, oldAppState = &#123;&#125;)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (newAppState === oldAppState) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">// 数据没有变化就不渲染了</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"render app..."</span>);</span></span><br><span class="line"><span class="undefined">            renderTitle(newAppState.title, oldAppState.title);</span></span><br><span class="line"><span class="undefined">            renderContent(newAppState.content, oldAppState.content);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 生成 store</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> store = createStore(appState, stateChanger);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 缓存旧的state</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> oldState = store.getState();</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 监听数据变化</span></span></span><br><span class="line"><span class="javascript">        store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 获取新的 state</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> newState = store.getState();</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 把新旧的 state 传进去渲染</span></span></span><br><span class="line"><span class="undefined">            renderApp(newState, oldState);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 新的 newState 变成了旧的 oldState，等待下一次数据变化重新渲染</span></span></span><br><span class="line"><span class="undefined">            oldState = newState;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">        renderApp(store.getState());</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 三秒钟之后，修改标题和标题颜色，并重新渲染</span></span></span><br><span class="line"><span class="actionscript">        setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            store.dispatch(&#123; type: <span class="string">"UPDATE_TITLE_TEXT"</span>, text: <span class="string">"Redux是React是好基友"</span> &#125;);</span></span><br><span class="line"><span class="actionscript">            store.dispatch(&#123; type: <span class="string">"UPDATE_TITLE_COLOR"</span>, color: <span class="string">"green"</span> &#125;);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// renderApp(store.getState());</span></span></span><br><span class="line"><span class="undefined">        &#125;, 3000);</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>打开页面，会发现只执行了第一次渲染，而后面的两次更新根本就不执行了，why???????</p><p>我们知道在 JavaScript 函数中，所有的参数都是值传递，参数为基本类型时传递的直接就是值，参数为对象时，参数的值就是对象所在的内存地址空间，看下我们修改 state 的地方：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stateChanger</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"UPDATE_TITLE_TEXT"</span>: &#123;</span><br><span class="line">            state.title.text = action.text;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"UPDATE_TITLE_COLOR"</span>: &#123;</span><br><span class="line">            state.title.color = action.color;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过上面的代码可以看到，我们只是修改了 <code>state.title</code> 中的 text 和 color 属性，而 title 对象的内存地址依然原来的，state 的内存地址也依然是原来，所以 newState 和 oldState 都是指向同一个内存地址，所以 <code>newAppState === oldAppState</code> 为 <code>true</code>，所以也就不会触发新的渲染。</p><p><a href="https://www.jianshu.com/p/996671d4dcc4" target="_blank" rel="noopener">内存空间详细图解</a></p><p>怎么办？？？？？？</p><p>是不是可以通过浅复制生成一个新的对象，然后将修改的部分覆盖到这个新的对象上，这样既可以保证没有被修改的对象内存地址保持不变，而被修改的对象又可以获得新的地址，继而触发渲染。<br><img src="/images/make-redux-402.png" alt=""></p><p>每次修改某些数据的时候，不去改变原来的数据，而是把需要修改数据对象都 copy 一个出来，然后再去修改新生成的数据。如上图所示，content 对象就可以在不同的阶段进行共享。</p><p>根据这个思路，来修改 <code>stateChanger</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stateChanger</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"UPDATE_TITLE_TEXT"</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123; <span class="comment">// 构建新的对象并且返回</span></span><br><span class="line">                ...state,</span><br><span class="line">                title: &#123;</span><br><span class="line">                    ...state.title,</span><br><span class="line">                    text: action.text</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"UPDATE_TITLE_COLOR"</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123; <span class="comment">// 构建新的对象并且返回</span></span><br><span class="line">                ...state,</span><br><span class="line">                title: &#123;</span><br><span class="line">                    ...state.title,</span><br><span class="line">                    color: action.color</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state; <span class="comment">// 没有修改，返回原来的对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次需要修改的时候都会产生新的对象，并且返回。而如果没有修改（在 default 语句中）则返回原来的 state 对象。</p><p>因为 stateChanger 不会修改原来对象了，而是返回对象，所以我们需要修改一下 createStore。让它用每次 stateChanger(state, action) 的调用结果覆盖原来的 state：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStore</span>(<span class="params">state, stateChanger</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> events = [];</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        subscribe: <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            events.push(event);</span><br><span class="line">        &#125;,</span><br><span class="line">        dispatch: <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 每次修改之后， 获取新的state</span></span><br><span class="line">            state = stateChanger(state, action);</span><br><span class="line">            events.forEach(<span class="function">(<span class="params">event</span>) =&gt;</span> event());</span><br><span class="line">        &#125;,</span><br><span class="line">        getState: <span class="function"><span class="params">()</span> =&gt;</span> state</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在的完整代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'title'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'content'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> appState = &#123;</span></span><br><span class="line"><span class="undefined">            title: &#123;</span></span><br><span class="line"><span class="actionscript">                text: <span class="string">"redux"</span>,</span></span><br><span class="line"><span class="actionscript">                color: <span class="string">"red"</span>,</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            content: &#123;</span></span><br><span class="line"><span class="actionscript">                text: <span class="string">"redux文档内容"</span>,</span></span><br><span class="line"><span class="actionscript">                color: <span class="string">"blue"</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">stateChanger</span><span class="params">(state, action)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">switch</span> (action.type) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">case</span> <span class="string">"UPDATE_TITLE_TEXT"</span>:</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> &#123; <span class="comment">// 构建新的对象并且返回</span></span></span><br><span class="line"><span class="undefined">                        ...state,</span></span><br><span class="line"><span class="undefined">                        title: &#123;</span></span><br><span class="line"><span class="undefined">                            ...state.title,</span></span><br><span class="line"><span class="undefined">                            text: action.text</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    &#125;;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">case</span> <span class="string">"UPDATE_TITLE_COLOR"</span>:</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> &#123; <span class="comment">// 构建新的对象并且返回</span></span></span><br><span class="line"><span class="undefined">                        ...state,</span></span><br><span class="line"><span class="undefined">                        title: &#123;</span></span><br><span class="line"><span class="undefined">                            ...state.title,</span></span><br><span class="line"><span class="undefined">                            color: action.color</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    &#125;;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">default</span>:</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> state; <span class="comment">// 没有修改，返回原来的对象</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 添加 createStore</span></span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">createStore</span><span class="params">(state, stateChanger)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> events = [];</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                subscribe: <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="undefined">                    events.push(event);</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="javascript">                dispatch: <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 每次修改之后， 获取新的state</span></span></span><br><span class="line"><span class="undefined">                    state = stateChanger(state, action);</span></span><br><span class="line"><span class="javascript">                    events.forEach(<span class="function">(<span class="params">event</span>) =&gt;</span> event());</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="javascript">                getState: <span class="function"><span class="params">()</span> =&gt;</span> state</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">renderTitle</span><span class="params">(newTitle, oldTile = &#123;&#125;)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (newTitle === oldTile) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">// 数据没有变化就不渲染了</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"render title..."</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> titleDom = <span class="built_in">document</span>.querySelector(<span class="string">"#title"</span>);</span></span><br><span class="line"><span class="undefined">            titleDom.innerHTML = newTitle.text;</span></span><br><span class="line"><span class="undefined">            titleDom.style.color = newTitle.color;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">renderContent</span><span class="params">(newContent, oldContent = &#123;&#125;)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (newContent === oldContent) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">// 数据没有变化就不渲染了</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"render content..."</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> contentDom = <span class="built_in">document</span>.querySelector(<span class="string">"#content"</span>);</span></span><br><span class="line"><span class="undefined">            contentDom.innerHTML = newContent.text;</span></span><br><span class="line"><span class="undefined">            contentDom.style.color = newContent.color;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">renderApp</span><span class="params">(newAppState, oldAppState = &#123;&#125;)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (newAppState === oldAppState) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">// 数据没有变化就不渲染了</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"render app..."</span>);</span></span><br><span class="line"><span class="undefined">            renderTitle(newAppState.title, oldAppState.title);</span></span><br><span class="line"><span class="undefined">            renderContent(newAppState.content, oldAppState.content);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 生成 store</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> store = createStore(appState, stateChanger);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 缓存旧的state</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> oldState = store.getState();</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 监听数据变化</span></span></span><br><span class="line"><span class="javascript">        store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 获取新的 state</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> newState = store.getState();</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 把新旧的 state 传进去渲染</span></span></span><br><span class="line"><span class="undefined">            renderApp(newState, oldState);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 新的 newState 变成了旧的 oldState，等待下一次数据变化重新渲染</span></span></span><br><span class="line"><span class="undefined">            oldState = newState;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">        renderApp(store.getState());</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 三秒钟之后，修改标题和标题颜色，并重新渲染</span></span></span><br><span class="line"><span class="actionscript">        setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            store.dispatch(&#123; type: <span class="string">"UPDATE_TITLE_TEXT"</span>, text: <span class="string">"Redux是React是好基友"</span> &#125;);</span></span><br><span class="line"><span class="actionscript">            store.dispatch(&#123; type: <span class="string">"UPDATE_TITLE_COLOR"</span>, color: <span class="string">"green"</span> &#125;);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// renderApp(store.getState());</span></span></span><br><span class="line"><span class="undefined">        &#125;, 3000);</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>刷新页面，然后打开控制台看下log<br><img src="/images/make-redux-403.png" alt=""></p><p>另外，并不需要担心每次修改都新建共享结构对象会有性能、内存问题，因为构建对象的成本非常低，而且我们最多保存两个对象引用（oldState 和 newState），其余旧的对象都会被垃圾回收掉。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://huziketang.mangojuice.top/books/react/" target="_blank" rel="noopener">http://huziketang.mangojuice.top/books/react/</a></p>]]></content>
    
    <summary type="html">
    
      redux在现在前端开发中是必须要了解学习的，通过模拟思路是一种极好的学习方式
    
    </summary>
    
      <category term="javascript" scheme="https://daihaoxin.github.io/categories/javascript/"/>
    
    
      <category term="动手模拟" scheme="https://daihaoxin.github.io/tags/%E5%8A%A8%E6%89%8B%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="react" scheme="https://daihaoxin.github.io/tags/react/"/>
    
      <category term="redux" scheme="https://daihaoxin.github.io/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>redux手动实现之三数据监控</title>
    <link href="https://daihaoxin.github.io/post/9995c091.html"/>
    <id>https://daihaoxin.github.io/post/9995c091.html</id>
    <published>2019-02-15T07:11:00.000Z</published>
    <updated>2019-03-17T06:19:04.447Z</updated>
    
    <content type="html"><![CDATA[<p>接着上一节继续来看代码，每次通过 dispatch 修改状态之后都要重新调用 renderApp 去渲染，不然的话页面不会改变的，那么能不能智能一点，在每次调用 dispatch 的时候自动调用 renderApp 呢？ </p><p>好像是可以的，将 renderApp 传入 dispatch ，在数据更新后，重新调用下就可以了。</p><p>但是，新的问题又来了，既然 state 是共享数据，那么使用的地方必然不止一处，如果数据更新了，需要调用的渲染函数也不止一个，dispatch 就会变得特别臃肿。</p><p>这里就要用到<a href="/post/cf3255c4.html">观察者模式</a>了，修改 createStore 为如下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStore</span>(<span class="params">state,stateChanger</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> events = [];</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        subscribe:<span class="function">(<span class="params">event</span>)=&gt;</span>&#123; </span><br><span class="line">             events.push(event);</span><br><span class="line">        &#125;,</span><br><span class="line">        dispatch: <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">            stateChanger(state, action);</span><br><span class="line">            events.forEach(<span class="function">(<span class="params">event</span>)=&gt;</span>event());</span><br><span class="line">        &#125;,</span><br><span class="line">        getState: <span class="function"><span class="params">()</span> =&gt;</span> state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在 createStore 里面定义了一个数组 events和一个新的方法 subscribe，可以通过 store.subscribe(event) 的方式给 subscribe 传入一个监听函数，这个函数会被 push 到 events 中。</p><p>每次修改数据时都会调用 dispatch ，而 dispatch 除了修改数据，还会遍历调用 events 数组里面的函数，这样就可以通过 subscribe 在 events 中注册事件，来进行数据改变之后的操作。</p><p>现在只要在使用到数据的地方，通过 subscribe 注册一个事件就可以在 dispatch 触发数据改变的时候，重新渲染使用到数据的地方。</p><p>全部代码修改如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'title'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'content'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> appState = &#123;</span></span><br><span class="line"><span class="undefined">            title: &#123;</span></span><br><span class="line"><span class="actionscript">                text: <span class="string">"redux"</span>,</span></span><br><span class="line"><span class="actionscript">                color: <span class="string">"red"</span>,</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            content: &#123;</span></span><br><span class="line"><span class="actionscript">                text: <span class="string">"redux文档内容"</span>,</span></span><br><span class="line"><span class="actionscript">                color: <span class="string">"blue"</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">stateChanger</span><span class="params">(state, action)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">switch</span> (action.type) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">case</span> <span class="string">"UPDATE_TITLE_TEXT"</span>: &#123;</span></span><br><span class="line"><span class="undefined">                    state.title.text = action.text;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">case</span> <span class="string">"UPDATE_TITLE_COLOR"</span>: &#123;</span></span><br><span class="line"><span class="undefined">                    state.title.color = action.color;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">default</span>:</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 添加 createStore</span></span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">createStore</span><span class="params">(state, stateChanger)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> events = [];</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                subscribe: <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="undefined">                    events.push(event);</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="javascript">                dispatch: <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="undefined">                    stateChanger(state, action);</span></span><br><span class="line"><span class="javascript">                    events.forEach(<span class="function">(<span class="params">event</span>) =&gt;</span> event());</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="javascript">                getState: <span class="function"><span class="params">()</span> =&gt;</span> state</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">renderTitle</span><span class="params">(title)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> titleDom = <span class="built_in">document</span>.querySelector(<span class="string">"#title"</span>);</span></span><br><span class="line"><span class="undefined">            titleDom.innerHTML = title.text;</span></span><br><span class="line"><span class="undefined">            titleDom.style.color = title.color;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">renderContent</span><span class="params">(content)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> contentDom = <span class="built_in">document</span>.querySelector(<span class="string">"#content"</span>);</span></span><br><span class="line"><span class="undefined">            contentDom.innerHTML = content.text;</span></span><br><span class="line"><span class="undefined">            contentDom.style.color = content.color;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">renderApp</span><span class="params">(appState)</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">            renderTitle(appState.title);</span></span><br><span class="line"><span class="undefined">            renderContent(appState.content);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 生成 store</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> store = createStore(appState, stateChanger);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 监听数据变化</span></span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="javascript">        store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="undefined">            renderApp(store.getState());</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">        renderApp(store.getState());</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 三秒钟之后，修改标题和标题颜色，并重新渲染</span></span></span><br><span class="line"><span class="actionscript">        setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            store.dispatch(&#123; type: <span class="string">"UPDATE_TITLE_TEXT"</span>, text: <span class="string">"Redux是React是好基友"</span> &#125;);</span></span><br><span class="line"><span class="actionscript">            store.dispatch(&#123; type: <span class="string">"UPDATE_TITLE_COLOR"</span>, color: <span class="string">"green"</span> &#125;);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// renderApp(store.getState());</span></span></span><br><span class="line"><span class="undefined">        &#125;, 3000);</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在我们有了一个比较通用的 createStore，它可以产生一种我们新定义的数据类型 store，通过 store.getState 我们获取共享状态，而且我们约定只能通过 store.dispatch 修改共享状态。store 也允许我们通过 store.subscribe 监听数据数据状态被修改了，并且进行后续的例如重新渲染页面的操作。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://huziketang.mangojuice.top/books/react/" target="_blank" rel="noopener">http://huziketang.mangojuice.top/books/react/</a></p>]]></content>
    
    <summary type="html">
    
      redux在现在前端开发中是必须要了解学习的，通过模拟思路是一种极好的学习方式
    
    </summary>
    
      <category term="javascript" scheme="https://daihaoxin.github.io/categories/javascript/"/>
    
    
      <category term="动手模拟" scheme="https://daihaoxin.github.io/tags/%E5%8A%A8%E6%89%8B%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="react" scheme="https://daihaoxin.github.io/tags/react/"/>
    
      <category term="redux" scheme="https://daihaoxin.github.io/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>redux手动实现之二store</title>
    <link href="https://daihaoxin.github.io/post/ecfe7ba3.html"/>
    <id>https://daihaoxin.github.io/post/ecfe7ba3.html</id>
    <published>2019-02-15T07:09:00.000Z</published>
    <updated>2019-03-17T06:19:04.447Z</updated>
    
    <content type="html"><![CDATA[<p>上一节通过 <code>dispatch</code> 控制了对共享数据 <code>appState</code> 操作的渠道，这种模式可以很好的解决共享数据修改难以排查的问题，现在我们再做一次抽离，使这种模式可以很好的复用到其他应用上。</p><p>构建一个函数叫<code>createStore</code>用来生成一个维护共享数据的中心<code>store</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStore</span>(<span class="params">state, stateChanger</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        dispatch: <span class="function">(<span class="params">action</span>) =&gt;</span> stateChanger(state, action),</span><br><span class="line">        getState: <span class="function"><span class="params">()</span> =&gt;</span> state</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>createStore</code> 接收两个参数 state 和 stateChanger， state 用于表示应用程序的状态，stateChanger 就是上一节的 dispatch 用于根据 action 的变化去操作 state。</p><p>createStore 会返回包含两个方法 getState 和 dispatch 的对象。getState 用于返回 state 参数，dispatch 用于修改数据，和之前不同的是它只接受一个参数 action，然后它会把 state 和 action 一并传给 stateChanger，那么 stateChanger 就可以根据 action 来修改 state 了。</p><p>现在使用 createStore 来修改上一节的代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'title'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'content'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> appState = &#123;</span></span><br><span class="line"><span class="undefined">            title: &#123;</span></span><br><span class="line"><span class="actionscript">                text: <span class="string">"redux"</span>,</span></span><br><span class="line"><span class="actionscript">                color: <span class="string">"red"</span>,</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            content: &#123;</span></span><br><span class="line"><span class="actionscript">                text: <span class="string">"redux文档内容"</span>,</span></span><br><span class="line"><span class="actionscript">                color: <span class="string">"blue"</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">stateChanger</span><span class="params">(state, action)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">switch</span> (action.type) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">case</span> <span class="string">"UPDATE_TITLE_TEXT"</span>: &#123;</span></span><br><span class="line"><span class="undefined">                    state.title.text = action.text;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">case</span> <span class="string">"UPDATE_TITLE_COLOR"</span>: &#123;</span></span><br><span class="line"><span class="undefined">                    state.title.color = action.color;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">default</span>:</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 添加 createStore</span></span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">createStore</span><span class="params">(state, stateChanger)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                dispatch: <span class="function">(<span class="params">action</span>) =&gt;</span> stateChanger(state, action),</span></span><br><span class="line"><span class="javascript">                getState: <span class="function"><span class="params">()</span> =&gt;</span> state</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">renderTitle</span><span class="params">(title)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> titleDom = <span class="built_in">document</span>.querySelector(<span class="string">"#title"</span>);</span></span><br><span class="line"><span class="undefined">            titleDom.innerHTML = title.text;</span></span><br><span class="line"><span class="undefined">            titleDom.style.color = title.color;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">renderContent</span><span class="params">(content)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> contentDom = <span class="built_in">document</span>.querySelector(<span class="string">"#content"</span>);</span></span><br><span class="line"><span class="undefined">            contentDom.innerHTML = content.text;</span></span><br><span class="line"><span class="undefined">            contentDom.style.color = content.color;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">renderApp</span><span class="params">(appState)</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">            renderTitle(appState.title);</span></span><br><span class="line"><span class="undefined">            renderContent(appState.content);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 生成 store</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> store = createStore(appState, stateChanger);</span></span><br><span class="line"><span class="undefined">        renderApp(store.getState());</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 三秒钟之后，修改标题和标题颜色，并重新渲染</span></span></span><br><span class="line"><span class="actionscript">        setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            store.dispatch(&#123; type: <span class="string">"UPDATE_TITLE_TEXT"</span>, text: <span class="string">"Redux是React是好基友"</span> &#125;);</span></span><br><span class="line"><span class="actionscript">            store.dispatch(&#123; type: <span class="string">"UPDATE_TITLE_COLOR"</span>, color: <span class="string">"green"</span> &#125;);</span></span><br><span class="line"><span class="undefined">            renderApp(store.getState());</span></span><br><span class="line"><span class="undefined">        &#125;, 3000);</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://huziketang.mangojuice.top/books/react/" target="_blank" rel="noopener">http://huziketang.mangojuice.top/books/react/</a></p>]]></content>
    
    <summary type="html">
    
      redux在现在前端开发中是必须要了解学习的，通过模拟思路是一种极好的学习方式
    
    </summary>
    
      <category term="javascript" scheme="https://daihaoxin.github.io/categories/javascript/"/>
    
    
      <category term="动手模拟" scheme="https://daihaoxin.github.io/tags/%E5%8A%A8%E6%89%8B%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="react" scheme="https://daihaoxin.github.io/tags/react/"/>
    
      <category term="redux" scheme="https://daihaoxin.github.io/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>redux手动实现之一初步</title>
    <link href="https://daihaoxin.github.io/post/2da5028e.html"/>
    <id>https://daihaoxin.github.io/post/2da5028e.html</id>
    <published>2019-02-15T07:07:00.000Z</published>
    <updated>2019-03-17T06:19:04.447Z</updated>
    
    <content type="html"><![CDATA[<p>Redux 是一种前端新型的架构模式，经常和 React 一起使用，在我们使用 React 的时候基本都要伴随着 Redux , 并使用 react-redux 这个库把这两粘和起来。</p><p>需要注意的是，Redux 是一种从 Flux 演变而来的架构模式，它不关注跟哪个库一起用，你可以把它应用到 React 和 Vue，跟 jquery 结合也没有问题。react-redux 就是一种将 Redux 和 React 结合起来的一个库。</p><p>关于 Redux 的用法可以去官网上查看，今天主要是来看下 redux 主要解决了什么问题以及怎么解决的。</p><p>通过 webstorm 新建一个项目 redux-achieve , 新建 <code>index.html</code> 里面的 body 结构为:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'title'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'content'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建 <code>index.js</code>，添加代码，表示应用的状态：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> appState = &#123;</span><br><span class="line">    title: &#123;</span><br><span class="line">        text: <span class="string">"redux"</span>,</span><br><span class="line">        color: <span class="string">"red"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    content: &#123;</span><br><span class="line">        text: <span class="string">"redux文档内容"</span>,</span><br><span class="line">        color: <span class="string">"blue"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后添加以下函数，将状态渲染到页面上。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderTitle</span>(<span class="params">title</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> titleDom = <span class="built_in">document</span>.querySelector(<span class="string">"#title"</span>);</span><br><span class="line">    titleDom.innerHTML = title.text;</span><br><span class="line">    titleDom.style.color = title.color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderContent</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> contentDom = <span class="built_in">document</span>.querySelector(<span class="string">"#content"</span>);</span><br><span class="line">    contentDom.innerHTML = content.text;</span><br><span class="line">    contentDom.style.color = content.color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderApp</span>(<span class="params">appState</span>) </span>&#123;</span><br><span class="line">    renderTitle(appState.title);</span><br><span class="line">    renderContent(appState.content);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">renderApp(appState);</span><br></pre></td></tr></table></figure></p><p>然后打开页面，就会看到<br><img src="/images/make-redux-101.png" alt=""></p><p>这是一个很简单的页面，一看就明白，但是这个页面有个很大的问题，就是状态数据 appState 是一个全局变量，每个人都可以修改它，如果页面上有很多操作的话，出现问题的时候，很难排查哪一个操作改变了 appState 的值，这也就是常说的<strong>尽量避免使用全局变量</strong>。但是，很多时候确实需要全局变量来做到<strong>不同功能模块之间的数据共享</strong>，这是一个需要解决矛盾点。</p><p>为了解决这个问题，我们做一些约定，<strong>当我们需要修改共享数据的时候，只能通过制定的方法修改，而不能直接去改</strong>，以保证出现问题的时候，方便查找问题的根源。所以新建一个 <code>dispatch</code> 函数，专门用来修改数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"UPDATE_TITLE_TEXT"</span>: &#123;</span><br><span class="line">            state.title.text = action.text;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"UPDATE_TITLE_COLOR"</span>: &#123;</span><br><span class="line">            state.title.color = action.color;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>dispatch</code> 接收两个参数，一个是要修改的共享数据对象 <code>state</code> ，一个是<code>action</code>,<code>action</code>是一个普通的js对象，<code>action</code>里面必须包含一个 type 以表示想做什么事情，dispatch 通过这个值去执行对应的操作，<code>action</code>其他的属性是可以自定义传入的。</p><p>现在所有对于数据的操作都必须通过调用 <code>dispatch</code> 函数来进行，这时排查 bug 就只需要在 dispatch 的 case 里面打上断点就可以调试出来了。dispatch 就像一个单一功能的数据接口，只需要关注 dispatch 所有对 state 数据的操作就都被监控了。</p><p>完整代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'title'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'content'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> appState = &#123;</span></span><br><span class="line"><span class="undefined">            title: &#123;</span></span><br><span class="line"><span class="actionscript">                text: <span class="string">"redux"</span>,</span></span><br><span class="line"><span class="actionscript">                color: <span class="string">"red"</span>,</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            content: &#123;</span></span><br><span class="line"><span class="actionscript">                text: <span class="string">"redux文档内容"</span>,</span></span><br><span class="line"><span class="actionscript">                color: <span class="string">"blue"</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span><span class="params">(state, action)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">switch</span> (action.type) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">case</span> <span class="string">"UPDATE_TITLE_TEXT"</span>: &#123;</span></span><br><span class="line"><span class="undefined">                    state.title.text = action.text;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">case</span> <span class="string">"UPDATE_TITLE_COLOR"</span>: &#123;</span></span><br><span class="line"><span class="undefined">                    state.title.color = action.color;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">default</span>:</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">renderTitle</span><span class="params">(title)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> titleDom = <span class="built_in">document</span>.querySelector(<span class="string">"#title"</span>);</span></span><br><span class="line"><span class="undefined">            titleDom.innerHTML = title.text;</span></span><br><span class="line"><span class="undefined">            titleDom.style.color = title.color;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">renderContent</span><span class="params">(content)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> contentDom = <span class="built_in">document</span>.querySelector(<span class="string">"#content"</span>);</span></span><br><span class="line"><span class="undefined">            contentDom.innerHTML = content.text;</span></span><br><span class="line"><span class="undefined">            contentDom.style.color = content.color;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">renderApp</span><span class="params">(appState)</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">            renderTitle(appState.title);</span></span><br><span class="line"><span class="undefined">            renderContent(appState.content);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="undefined">        renderApp(appState);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 三秒钟之后，修改标题和标题颜色，并重新渲染</span></span></span><br><span class="line"><span class="actionscript">        setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            dispatch(appState, &#123; type: <span class="string">"UPDATE_TITLE_TEXT"</span>, text: <span class="string">"Redux是React是好基友"</span> &#125;);</span></span><br><span class="line"><span class="actionscript">            dispatch(appState, &#123; type: <span class="string">"UPDATE_TITLE_COLOR"</span>, color: <span class="string">"green"</span> &#125;);</span></span><br><span class="line"><span class="undefined">            renderApp(appState);</span></span><br><span class="line"><span class="undefined">        &#125;, 3000);</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://huziketang.mangojuice.top/books/react/" target="_blank" rel="noopener">http://huziketang.mangojuice.top/books/react/</a></p>]]></content>
    
    <summary type="html">
    
      redux在现在前端开发中是必须要了解学习的，通过模拟思路是一种极好的学习方式
    
    </summary>
    
      <category term="javascript" scheme="https://daihaoxin.github.io/categories/javascript/"/>
    
    
      <category term="动手模拟" scheme="https://daihaoxin.github.io/tags/%E5%8A%A8%E6%89%8B%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="react" scheme="https://daihaoxin.github.io/tags/react/"/>
    
      <category term="redux" scheme="https://daihaoxin.github.io/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>npx的使用</title>
    <link href="https://daihaoxin.github.io/post/7c5a0d00.html"/>
    <id>https://daihaoxin.github.io/post/7c5a0d00.html</id>
    <published>2019-02-11T23:35:00.000Z</published>
    <updated>2019-03-17T06:19:04.447Z</updated>
    
    <content type="html"><![CDATA[<p>Node 自带 npm 模块，所以可以直接使用 npx 命令。万一不能用，就要手动安装一下。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g npx</span></span><br></pre></td></tr></table></figure></p><h2 id="调用项目安装的模块"><a href="#调用项目安装的模块" class="headerlink" title="调用项目安装的模块"></a>调用项目安装的模块</h2><p>npx 想要解决的主要问题，就是调用项目内部安装的模块。比如，项目内部安装了测试工具 Mocha。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -D mocha</span></span><br></pre></td></tr></table></figure></p><p>一般来说，调用 <code>Mocha</code> ，只能在项目脚本和 <code>package.json</code> 的scripts字段里面， 如果想在命令行下调用，必须像下面这样。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 项目的根目录下执行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> node-modules/.bin/mocha --version</span></span><br></pre></td></tr></table></figure></p><p><code>npx</code> 就是想解决这个问题，让项目内部安装的模块用起来更方便，只要像下面这样调用就行了。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx mocha --version</span></span><br></pre></td></tr></table></figure></p><p><code>npx</code> 的原理很简单，就是运行的时候，会到<code>node_modules/.bin</code>路径和环境变量<code>$PATH</code>里面，检查命令是否存在。<br>由于 <code>npx</code> 会检查环境变量<code>$PATH</code>，所以系统命令也可以调用。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 等同于 ls</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npx ls</span></span><br></pre></td></tr></table></figure></p><p>注意，<code>Bash</code> 内置的命令不在<code>$PATH</code>里面，所以不能用。比如，<code>cd</code>是 <code>Bash</code> 命令，因此就不能用<code>npx cd</code>。</p><h2 id="避免全局安装模块"><a href="#避免全局安装模块" class="headerlink" title="避免全局安装模块"></a>避免全局安装模块</h2><p>除了调用项目内部模块，<code>npx</code> 还能避免全局安装的模块。比如，<code>create-react-app</code>这个模块是全局安装，<code>npx</code> 可以运行它，而且不进行全局安装。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx create-react-app my-react-app</span></span><br></pre></td></tr></table></figure></p><p>上面代码运行时，<code>npx</code> 将<code>create-react-app</code>下载到一个临时目录，使用以后再删除。所以，以后再次执行上面的命令，会重新下载<code>create-react-app</code>。</p><p>下载全局模块时，<code>npx</code> 允许指定版本。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx uglify-js@3.1.0 main.js -o ./dist/main.js</span></span><br></pre></td></tr></table></figure></p><p>上面代码指定使用 <code>3.1.0</code>版本的<code>uglify-js</code>压缩脚本。</p><p>注意，只要 <code>npx</code> 后面的模块无法在本地发现，就会下载同名模块。比如，本地没有安装<code>http-server</code>模块，下面的命令会自动下载该模块，在当前目录启动一个 <code>Web</code> 服务。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx http-server</span></span><br></pre></td></tr></table></figure></p><h2 id="–no-install-参数和–ignore-existing-参数"><a href="#–no-install-参数和–ignore-existing-参数" class="headerlink" title="–no-install 参数和–ignore-existing 参数"></a>–no-install 参数和–ignore-existing 参数</h2><p>如果想让 <code>npx</code> 强制使用本地模块，不下载远程模块，可以使用<code>--no-install</code>参数。如果本地不存在该模块，就会报错。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx --no-install http-server</span></span><br></pre></td></tr></table></figure></p><p>反过来，如果忽略本地的同名模块，强制安装使用远程模块，可以使用<code>--ignore-existing</code>参数。比如，本地已经全局安装了<code>create-react-app</code>，但还是想使用远程模块，就用这个参数。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx --ignore-existing create-react-app my-react-app</span></span><br></pre></td></tr></table></figure></p><h2 id="使用不同版本的-node"><a href="#使用不同版本的-node" class="headerlink" title="使用不同版本的 node"></a>使用不同版本的 node</h2><p>利用 <code>npx</code> 可以下载模块这个特点，可以指定某个版本的 <code>Node</code> 运行脚本。它的窍门就是使用 <code>npm</code> 的 <code>node 模块</code>。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx node@0.12.8 -v</span></span><br><span class="line">v0.12.8</span><br></pre></td></tr></table></figure></p><p>上面命令会使用 <code>0.12.8</code> 版本的 <code>Node</code> 执行脚本。原理是从 <code>npm</code> 下载这个版本的 <code>node</code>，使用后再删掉。</p><p>某些场景下，这个方法用来切换 <code>Node</code> 版本，要比 <code>nvm</code> 那样的版本管理器方便一些。</p><h2 id="p-参数"><a href="#p-参数" class="headerlink" title="-p 参数"></a>-p 参数</h2><p><code>-p</code>参数用于指定 <code>npx</code> 所要安装的模块，所以上一节的命令可以写成下面这样。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx -p node@0.12.8 node -v </span></span><br><span class="line">v0.12.8</span><br></pre></td></tr></table></figure></p><p>上面命令先指定安装<a href="mailto:`node@0.12.8" target="_blank" rel="noopener">`node@0.12.8</a><code>，然后再执行</code>node -v`命令。</p><p><code>-p</code>参数对于需要安装多个模块的场景很有用。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx -p lolcatjs -p cowsay [<span class="built_in">command</span>]</span></span><br></pre></td></tr></table></figure></p><h2 id="c-参数"><a href="#c-参数" class="headerlink" title="-c 参数"></a>-c 参数</h2><p>如果 <code>npx</code> 安装多个模块，默认情况下，所执行的命令之中，只有第一个可执行项会使用 <code>npx</code> 安装的模块，后面的可执行项还是会交给 <code>Shell</code> 解释。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx -p lolcatjs -p cowsay <span class="string">'cowsay hello | lolcatjs'</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 报错</span></span><br></pre></td></tr></table></figure></p><p>上面代码中，<code>cowsay hello | lolcatjs</code>执行时会报错，原因是第一项<code>cowsay</code>由 <code>npx</code> 解释，而第二项命令<code>localcatjs</code>由 <code>Shell</code> 解释，但是<code>lolcatjs</code>并没有全局安装，所以报错。</p><p><code>-c</code>参数可以将所有命令都用 <code>npx</code> 解释。有了它，下面代码就可以正常执行了。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx -p lolcatjs -p cowsay -c <span class="string">'cowsay hello | lolcatjs'</span></span></span><br></pre></td></tr></table></figure></p><p><code>-c</code>参数的另一个作用，是将环境变量带入所要执行的命令。举例来说，<code>npm</code> 提供当前项目的一些环境变量，可以用下面的命令查看。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm run env | grep npm_</span></span><br></pre></td></tr></table></figure></p><p><code>-c</code>参数可以把这些 <code>npm</code> 的环境变量带入 <code>npx</code> 命令。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npx -c <span class="string">'echo "$npm_package_name"'</span></span></span><br></pre></td></tr></table></figure></p><p>上面代码会输出当前项目的项目名。</p><h2 id="执行-GitHub-源码"><a href="#执行-GitHub-源码" class="headerlink" title="执行 GitHub 源码"></a>执行 GitHub 源码</h2><p><code>npx</code> 还可以执行 <code>GitHub</code> 上面的模块源码。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 执行 Gist 代码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npx https://gist.github.com/zkat/4bc19503fe9e9309e2bfaa2c58074d32</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行仓库代码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npx github:piuccio/cowsay hello</span></span><br></pre></td></tr></table></figure></p><p>注意，远程代码必须是一个模块，即必须包含<code>package.json</code>和入口脚本。</p>]]></content>
    
    <summary type="html">
    
      npm 从5.2版开始，增加了 npx 命令。它有很多用处，本文介绍该命令的主要使用场景。。
    
    </summary>
    
      <category term="javascript" scheme="https://daihaoxin.github.io/categories/javascript/"/>
    
    
      <category term="nodejs" scheme="https://daihaoxin.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>node爬虫之gbk网页中文乱码解决方案</title>
    <link href="https://daihaoxin.github.io/post/94238009.html"/>
    <id>https://daihaoxin.github.io/post/94238009.html</id>
    <published>2019-02-11T23:35:00.000Z</published>
    <updated>2019-03-17T06:19:04.447Z</updated>
    
    <content type="html"><![CDATA[<p>中文乱码具体是指用 <code>node</code> 请求 <code>gb2312</code> 编码的网页，无法正确获取网页中的中文（需要转码）。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>直接用 <a href="https://github.com/ashtuchkin/iconv-lite" target="_blank" rel="noopener">iconv-lite</a> 模块进行转码。</p><p><a href="https://github.com/ashtuchkin/iconv-lite" target="_blank" rel="noopener">iconv-lite</a> 是一个进行编码转换的模块（<code>node</code> 默认编码 <code>utf-8</code>）。需要 <code>decode</code> 的编码必须是 <code>Buffer</code> 类型。</p><h3 id="使用http模块"><a href="#使用http模块" class="headerlink" title="使用http模块"></a>使用<code>http</code>模块</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">"querystring"</span>);</span><br><span class="line"><span class="keyword">const</span> iconv = <span class="built_in">require</span>(<span class="string">"iconv-lite"</span>);</span><br><span class="line"><span class="keyword">let</span> postData = &#123;</span><br><span class="line">    username:<span class="string">"username"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> req = http.request(&#123;</span><br><span class="line">    hostname: <span class="string">"xxxx.com"</span>,</span><br><span class="line">    port: <span class="number">80</span>,</span><br><span class="line">    path: <span class="string">"/pathname"</span>,</span><br><span class="line">    method: <span class="string">"POST"</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">        <span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;, (res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> chunks = [];</span><br><span class="line">    res.on(<span class="string">"data"</span>, (chunk) =&gt; &#123;</span><br><span class="line">        chunks.push(chunk);</span><br><span class="line">    &#125;);</span><br><span class="line">    res.on(<span class="string">"end"</span>, () =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> html = iconv.decode(Buffer.concat(chunks), <span class="string">"gb2312"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">req.on(<span class="string">"error"</span>, (e) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">`problem with request: <span class="subst">$&#123;e.message&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// write data to request body</span></span><br><span class="line">req.write(querystring.stringify(postData));</span><br><span class="line">req.end();</span><br></pre></td></tr></table></figure><h3 id="使用axios"><a href="#使用axios" class="headerlink" title="使用axios"></a>使用<code>axios</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> iconv = <span class="built_in">require</span>(<span class="string">"iconv-lite"</span>);</span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">"axios"</span>);</span><br><span class="line">axios.get(<span class="string">`url`</span>, &#123; <span class="attr">responseType</span>: <span class="string">"arraybuffer"</span> &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> html = iconv.decode(response.data, <span class="string">"gb2312"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(html);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      最近为了帮家里领导找资料，用爬虫爬了一波，遇到了中文乱码的问题，在此记录一下。
    
    </summary>
    
      <category term="javascript" scheme="https://daihaoxin.github.io/categories/javascript/"/>
    
    
      <category term="nodejs" scheme="https://daihaoxin.github.io/tags/nodejs/"/>
    
  </entry>
  
</feed>
